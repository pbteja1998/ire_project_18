BKG	Natural language generation must work with insufficient input .	A-0
BKG	Underspecifications can be caused by shortcomings of the component providing the input or by the preliminary state of incrementally given input .	A-1
OWN	The paper aims to escape from such dead-end situations by making assumptions .	A-2
AIM	We discuss global aspects of default handling .	A-3
OWN	Two problem classes for defaults in the incremental syntactic generator VM-GEN are presented to substantiate our discussion .	A-4
BKG	Natural Language Generation , i.e. , the process of building an adequate utterance for some given content , is by nature a decision-making problem.	S-0
BKG	Internal decisions are made on the basis of the specified input .	S-1
BKG	Unfortunately , input information can be insufficient in two respects :	S-2
BKG	If the input structure for generation is provided by another AI-system , global problems in producing sufficient input information for the generator may occur , e.g. , because of translation mismatches in machine translation.	S-3
BKG	In this case , the generator either has to use a default or formulate a request for clarification in order to be able to continue its processing , i.e. , to produce an utterance .	S-4
BKG	During simultaneous interpretation requests are rather unusual .	S-5
BKG	Here defaults allow for a standalone handling of the problem .	S-6
BKG	For example , problems during speech recognition of automatic interpretation can lead to results like `` the ( man / men ) will come to the hotel tomorrow '' .	S-7
BKG	If the system is not able to give a preference for one of the alternatives , e.g. , by evaluating context information , the generator has to choose a probable number value on its own to complete verbalization .	S-8
BKG	Furthermore , for incremental generation , the input information is produced and handed over step by step , so that it can be temporarily incomplete -- although as a whole it may become sufficient .	S-9
BKG	This behaviour of a generator is motivated by psycholinguistic observations which show that people start speaking before all necessary linguistic material has been chosen ( e.g. , articulating a noun phrase before the dominating verb is selected ) .	S-10
BKG	As a consequence of underspecification , incremental generation is essentially based on working with defaults .	S-11
BKG	Elements are uttered before the processing or input consumption has been finished .	S-12
BKG	gives an example for defaults in the context of simultaneous interpretation : In Japanese , negation is specified at the end of the sentence while in English , it has to be specified in front of the finite verb .	S-13
BKG	Therefore , during Japanese-English translation , where analysis , transfer , and generation are performed in a parallel and incremental way , the system has to commit , e.g. , positive value before knowing the actual polarity .	S-14
BKG	Generally speaking , default handling specifies how processing , i.e. , further decision-making , can continue without sufficient input information .	S-15
BKG	So , one can compare default handling with advice to the system .	S-16
BKG	For reasons of uncertainty of assumptions , incremental systems with this facility must be able to repair the default decision when the assumption turns out to be wrong by information given later .	S-17
BKG	Catching on to the above example , there can be a negation specifier given at the end of the Japanese input sentence which cannot be simply integrated into the output sentence because the finite verb has already been uttered .	S-18
BKG	In this case , the output has to be repaired , e.g. , by repeating parts of the utterance : `` I will be able to meet you ... oops ... I won't be able to meet you at the hotel this evening . ''	S-19
AIM	In the following sections , we argue for the appropriateness of processing-conforming default handling .	S-20
OWN	Basically , the processing-conforming mode makes the overall system homogeneous because the combination of default-caused processing and input-licensed processing requires no specific description .	S-21
OWN	The homogeneity becomes especially helpful in the case where the input verifies the default assumption rendering unnecessary any recomputation .	S-22
OWN	For the opposite case where the default must be withdrawn we have to mark all defaults .	S-23
OWN	Even more homogeneity is introduced to an incremental system if the default descriptions are given in terms of input specifications .	S-24
OWN	This representation allows for easy checking the coincidence between a chosen default and input given later .	S-25
TXT	The content of this paper can be summarized as follows .	S-26
TXT	Sectionprovides a general description for defaults in generation emphasizing the specific requirements in an incremental system .	S-27
TXT	After identifying the conditions under which defaults are triggered ( section) , the application of a default ( section) and the definition of its description ( section) is outlined .	S-28
TXT	The crucial case of removing defaults not coinciding with newly arriving input in an incremental system is discussed in section.	S-29
TXT	In section, this mechanism is applied to the incremental sentence generator VM-GEN .	S-30
TXT	In the beginning of the section , the basic design of the system is outlined .	S-31
TXT	Later on , default handling is included and exemplified for two general cases .	S-32
TXT	In the final section we summarize the main results of the paper .	S-33
TXT	Furthermore , we discuss how default handling can be adapted to multilingual generation , as required by the speech-to-speech translation system VERBMOBIL.	S-34
CTR	In the literature of non-incremental generation , the need for defaults is hardly ever taken into account .	S-35
OTH	The common point of view restricts the input to be sufficient for generation ( see , e.g. , the Text Structure byfor a syntactic generator ) .	S-36
OTH	In incremental generation , most authors agree on the necessity of using defaults,,.	S-37
CTR	Nevertheless , they do not in sufficient depth answer the question of how to guide the processes of default handling and repair within a generator .	S-38
OWN	This problem is the starting-point for the following considerations .	S-39
OWN	We assume that generation is a decision-making process with the aim of producing a plausible utterance based on given information .	S-40
OWN	As mentioned in section, there are cases where this process stops ( caused by underspecification of the input ) before finishing its output .	S-41
OWN	We define a module named default handler which tries to resume the process by giving advice to it , i.e. , by making assumptions about the missing input specification .	S-42
TXT	With respect to this task it is discussed	S-43
TXT	in which situations defaults are applied ( see section) ,	S-44
TXT	how default handling is integrated into a system ( see section) ,	S-45
TXT	how the knowledge for default handling is described ( see section) , and	S-46
TXT	how assumptions are cancelled when they turn out to be inconsistent with newly arriving input ( see section) .	S-47
OWN	In incremental generation , as mentioned in section, interleaved input consumption and output production causes specific default situations .	S-48
OWN	An incremental processing scheme allows for an increase of efficiency and flexibility , e.g. , by making the analysis and generation processes of a system for simultaneous interpretation overlap in time .	S-49
OWN	There are two competing goals of incremental generation for spoken output , that must be taken into account when estimating the usefulness of defaults :	S-50
OWN	Fluency :	S-51
OWN	Long hesitations should be avoided during the production of an utterance , in order to be acceptable to the hearer .	S-52
OWN	Reliability :	S-53
OWN	Errors in an utterance may cause misunderstanding .	S-54
OWN	In most cases , errors should be recovered by appropriate self-corrections .	S-55
OWN	Excessive use of self-corrections or erroneous expressions should beavoided because they decrease intelligibility of the utterance .	S-56
OWN	Obviously there is a trade-off between fluency and reliability : maximal reliability requires ` secure ' decisions and therefore leads to output delay .	S-57
OWN	On the other hand , maximal fluency necessitates the use of assumptions and repair , respectively .	S-58
OWN	We define as default situation the situation where a generation system has not yet finished the utterance but at the same time has consumed all given input and is not able to continue processing .	S-59
OWN	In non-incremental generation , this corresponds to the fact that the input lacks necessary information , because the entire input is assumed to be given at one time ( e.g. , the undecidable number value of the example described in section) .	S-60
OWN	Thus , default handling should be triggered immediately .	S-61
OWN	In incremental generation , however , the system may get a new piece of information later on that enables it to continue processing ( e.g. , the specification of a negation value + as outlined in the example in section) .	S-62
OWN	Therefore , possible alternatives are either to wait for the next input or to trigger default handling .	S-63
OWN	The former violates the fluency goal , the latter may violate the reliability goal .	S-64
OWN	We propose the explicit use of time-limits for delay intervals .	S-65
OWN	Furthermore , the certainty of a default is described by a value .	S-66
OWN	As soon as a default situation is identified , the certainty of the default is checked to see whether it exceeds a predefined threshold that determines the degree of fluency / reliability .	S-67
OWN	Each application of a default decreases the global certainty of the system 's state .	S-68
OWN	Consequently , there should be a limit for the maximal number of defaults applicable to the same sentence .	S-69
OWN	Basically , there are two strategies to integrate default handling into ongoing processing .	S-70
OWN	Defaults may be handled in a way that differs from the ` normal ' processing of the system , e.g. , as short-cuts .	S-71
OWN	One advantage can be an efficient handling of defaults .	S-72
OWN	Furthermore , the designer of the default component is completely free in deciding about the realization of defaults in the system .	S-73
OWN	A disadvantage is the difficulty of providing consistency between default-caused and input-licensed processing .	S-74
OWN	Alternatively , the ongoing processing can deal with the default values in an ordinary manner ( processing-conforming default handling ) .	S-75
OWN	This may be less efficient but guarantees consistency during processing , especially in case of a replacement by an input-licensed value .	S-76
OWN	For incremental generation , the system has to provide repair facilities in any case .	S-77
OWN	So , they can also be used for non-monotonic modifications of default-caused results .	S-78
OWN	We take this option in order to make the overall system homogeneous .	S-79
OWN	The knowledge source that is used for default handling should provide the most plausible actions for a default situation .	S-80
OWN	We represent the knowledge as a set of heuristic rules called default descriptions .	S-81
OWN	A default description defines a set of operations that should be carried out in a certain situation where the generation process can not be continued .	S-82
OWN	A default description has the following form :	S-83
OWN	The set of default preconditions defines tests that are applied to the given situation in order to find out whether the corresponding default body can be activated .	S-84
OWN	They include tests for the existence of particular information , tests for the structure under creation and tests for the state of processing .	S-85
OWN	The default body describes how to continue processing with defaults in an adequate way .	S-86
OWN	For incremental systems , we propose to express the body as a specification of input increments .	S-87
OWN	An important prerequisite is that the size of increments is defined flexibly enough to cope with varying amounts of information .	S-88
OWN	Obviously , an important advantage of this approach is homogeneity of the overall system .	S-89
OWN	Especially , the homogeneous representation of default-caused and input-licensed structures is the easiest and most direct way to test coincidences or contradictions between default-specified and input-caused values .	S-90
TXT	In section, this approach is outlined by different examples .	S-91
OWN	For non-incremental systems , an operational approach is preferable since there is no way to consume additional input increments , presupposing that the input has been considered as a whole before a default situation occurs .	S-92
OWN	If several default preconditions are applicable , the certainty values for default descriptions are examined to find which provides the system with the most plausible action .	S-93
OWN	The individual default descriptions should take into account the global constraints for processing stated in the knowledge sources of the system .	S-94
OWN	For example , the assumption of nominative case for a German NP complement can regularly be made only once for the same verb .	S-95
OWN	For reasons of homogeneity , the default description should at least be compatible with the specifications of the knowledge used for basic processing .	S-96
OWN	In order to guarantee consistency , default descriptions should merely contain what is orthogonal to the basic knowledge sources .	S-97
OWN	The repair of false assumptions is a crucial point of default handling in the context of incremental processing because the default information does not remain locally but can cause further decisions of the system .	S-98
OWN	Contrarily , for non-incremental input there will be no value given that can contradict default values .	S-99
OWN	As a first step of repair , inconsistencies between input-provided and default-caused values are identified by simply matching the values .	S-100
OWN	Then effects of the respective defaults are withdrawn introducing the input-provided values into the system .	S-101
OWN	Generally , a decision during generation influences other decisions all over the system .	S-102
OWN	Thus the effect of a default body may be propagated through the entire system ( e.g. , choosing a construction of main clause with causal subordinate clause influences the choice of syntactic realizations ) .	S-103
OWN	Roughly speaking , withdrawing a default assumption can be realized by backtracking to the earlier state of the system where the default had been introduced or by non-monotonic changes to the current state of the system .	S-104
OWN	The disadvantage of backtracking is that partial results are thrown away which could be reused during further processing .	S-105
OWN	Non-monotonic changes preserve these results .	S-106
OWN	In this framework , cancelling defaults requires the system to identify which results are caused by default handling .	S-107
OWN	Dependency links between the immediate result of a default body and results of the influenced decisions allow for this identification .	S-108
OWN	The disadvantage of non-monotonic changes is the complexity of computation , e.g. , supported by a truth maintenance system .	S-109
OWN	When designing an incremental system , simple backtracking is ruled out because the part of the sentence uttered cannot be withdrawn after it has been perceived by the addressee of the message .	S-110
OWN	So , we end up with a processing-conforming default handler for generation realizing repair by non-monotonic changes .	S-111
OWN	The adaptation of our general discussion of default handling to the system VM-GEN not only provides concrete examples for the reader but also shows that a homogeneous combination of default handling , regular processing , and utterance repair is possible .	S-112
BAS	The syntactic generator VM-GEN is a further development of TAG-GENwithin the framework of VERBMOBIL , aspeech-to-speech translation system .	S-113
OWN	Its usefulness for simultaneous interpretation results from its incremental and parallel style of processing .	S-114
OWN	VM-GEN is able to consume input increments of varying size .	S-115
OWN	These increments describe lexical items or semantic relations between them .	S-116
OWN	Single input increments are handed over to objects of a distributed parallel system , each of which tries to verbalize the structure that results from the corresponding input increment .	S-117
BAS	VM-GEN uses an extension of Tree Adjoining Grammars ( TAGs )) as its syntactic representation formalism that is not only adequate for the description of natural language but also supports incremental generation.	S-118
TXT	In the following , we introduce examples for default processing triggered during the German inflection process in VM-GEN to substantiate the global statements made in section.	S-119
OWN	Inflection uses some syntactic properties of an element to compute its morphological form .	S-120
OWN	This information has partly to be specified in the input ( e.g. , the number for a noun ) and is partly inherited from other elements ( e.g. , the number for a verb or the case for a noun ) .	S-121
OWN	The two reasons for missing information necessitate different methods of treatment which nevertheless both can uniformly be integrated into regular processing .	S-122
OWN	If information of the first type is missing ( e.g. , because of problems during analysis , see section) , an assumption can be made locally by simulating the respective part of the input .	S-123
OWN	The default for missing number information in VM-GEN would look as follows :	S-124
OWN	The set of default preconditions is applied to all objects ( OBJ ) of VM-GEN in order to test the kind of underspecification ( ` number ' in the example ) .	S-125
OWN	The default body introduces a new value ( sg ) by creating an input increment as a default .	S-126
OWN	The test for coincidence with the input-licensed value is realized by a comparison in the objects of VM-GEN .	S-127
OWN	There is a unique association of input increments and objects of VM-GEN ( OBJ is used as identifier ) that allows for translating an input modification into a modification of the state of the respective object .	S-128
OWN	In case of contradictions the default and all default-caused decisions are revised ( see below ) .	S-129
OWN	Making an assumption can be influenced by global constraints .	S-130
OWN	An example , which is well studied in psycholinguistics , is the utterance of a noun before the verb has been chosen .	S-131
OWN	If , e.g. , the noun `` Besucher '' ( English : `` visitor '' ) is known to be the agent of an action , it may be uttered as subject in the first position of the sentence by default .	S-132
OWN	This treatment presupposes the choice of a ` dummy ' verb , which at least subcategorizes a subject and has active voice .	S-133
OWN	The use of a dummy verb and an underspecified verbal structure the NP is integrated into allows for a simple global test that rules out the same case value assignment to different NP complements as it is required for most of the German verbs .	S-134
OWN	This rule is represented in the grammar as a part of the description of subcategorization frames for verbs .	S-135
OWN	For reasons of homogeneity we use the information stored in the syntactic knowledge sources of VM-GEN for expressing syntactic constraints during default handling as well .	S-136
OWN	The advantage of this approach is , that processing is continued in a consistent way , which eases the introduction of the input-licensed value .	S-137
OWN	One default for choosing a missing case-value is specified as follows :	S-138
OWN	The default preconditions of the rule characterize a situation where an object ( ) contains no information about the case but identifies the input category as ` N ' for noun .	S-139
OWN	Furthermore , the semantic function of the object is specified as ` agent ' but no verb defined yetin the head object .	S-140
OWN	That is why , the N-object cannot inherit a case value and also does not know whether it is allowed to occupy the front position in the utterance .	S-141
OWN	Evaluating the default body , the system creates a V-object OBJ ' .	S-142
OWN	On the basis of the input information in ( ENTITY OBJ ' ... ) it chooses a minimal syntactic structure from the inheritance net of the grammar , that just desribes a verb category without concrete filler ( a dummy verb ) plus a subject complement and active voice for the verbal phrase .	S-143
OWN	Now , the N-structure is combined with the V-structure of the introduced V-object as during normal processing .	S-144
OWN	Therefore , the case value can be inherited .	S-145
OWN	Additionally , the first position can be assigned to the subject which can be uttered now .	S-146
OWN	The basic VM-GEN module provides repair strategies in order to allow for the specification of additions , modifications and deletions of input increments , i.e. , to model a flexible input interface .	S-147
OWN	Three features of the system are basically used for repair : First , input increments are uniquely associated with objects of VM-GEN , so that input modifications can be translated into modifications of the objects ' states .	S-148
OWN	Second , each modification of an object 's state makes it compare new and old information .	S-149
OWN	In case of a difference , the modified parts are sent to all concerned objects .	S-150
OWN	Third , the dependency relations that determine the communication links between objects allow for a hierarchical organization of the objects , which is the basis for synchronizing repair .	S-151
OWN	A repair must be triggered in the example described above if , e.g. , a verb with voice passive is actually specified .	S-152
OWN	In this case , the mapping of the semantic role ` agent ' to the syntactic function ` subject ' is revised .	S-153
OWN	The agent now has to be realized as part of a `` von '' - phrase , e.g .	S-154
OWN	Furthermore , the object checks whether the previously uttered part of the sentence includes some of the revised material ( i.e. , whether the object itself has participated in uttering ) .	S-155
OWN	If this is the case , it sends an error message up to the uppermost object of the hierarchy that actually is engaged in uttering .	S-156
OWN	This object is able to synchronize global repair .	S-157
OWN	Up to now , we just realized a simple repair strategy that consists of repeating the concerned parts of the utterance , e.g. `` der Besucher ... h ... dieser Termin wird von dem Besucher gewnscht '' .	S-158
AIM	This paper proposes a processing-conforming default handler for generation realizing repair by non-monotonic changes .	S-159
OWN	We provide the system with default descriptions .	S-160
OWN	The set of default preconditions expresses possible reasons for dead-end situations .	S-161
OWN	A default is triggered , if the preconditions match the current situation and the certainty value of the default exceeds the predefined threshold .	S-162
OWN	The default body is expressed in terms of the missing input specification in order to make the system work homogeneously .	S-163
OWN	We have verified the advantages of processing-conforming default handling by implementing a default handler for VM-GEN .	S-164
OWN	As future work , we will extend the default preconditions towards handling complex contextual information .	S-165
OWN	We will apply default handling to microplanning and lexical choice within VERBMOBIL .	S-166
OWN	With respect to a sophisticated output , we aim to combine VM-GEN with a flexible repair component .	S-167
OWN	The system VM-GEN is used in the VERBMOBIL scenario for multilingual generation ( English , German , and Japanese ) .	S-168
OWN	We mean by multilinguality that the same processing is applied for different languages .	S-169
OWN	In the underlying knowledge sources language-specific constraints are defined .	S-170
OWN	Default handling can be easily adapted to the requirements of multilingual generation by using language-specific default-descriptions .	S-171
OWN	For all knowledge sources the question arises how knowledge can be shared .	S-172
OWN	We intend to use core knowledge sources for representing common phenomena .	S-173
OWN	The core set of default descriptions for English and German , e.g. , contains the description of a reaction to a missing number value for a noun .	S-174
OWN	We aim to develop an efficient storing mechanism using a hierarchy of locally intersecting core descriptions .	S-175
