AIM	A novel approach to HPSG based natural language processing is described that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing , and inputs the primed grammar to an advanced Earley-style processor .	A-0
OWN	This way we provide an elegant solution to the problems with empty heads and efficient bidirectional processing which is illustrated for the special case of HPSG generation .	A-1
OWN	Extensive testing with a large HPSG grammar revealed some important constraints on the form of the grammar .	A-2
BKG	Bidirectionality of grammar is a research topic in natural language processing that is enjoying increasing attention.	S-0
BKG	This is mainly due to the clear theoretical and practical advantages of bidirectional grammar use.	S-1
AIM	We address this topic in describing a novel approach to HPSGbased language processing that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing , and hands the primed grammar to an advanced Earley processor .	S-2
OWN	The developed techniques are direction independent in the sense that they can be used for both generation and parsing with HPSG grammars .	S-3
AIM	In this paper , we focus on the application of the developed techniques in the context of the comparatively neglected area of HPSG generation .	S-4
OTH	gave the first use of's algorithm for generation , but this algorithm does not use the prediction step to restrict feature instantiations on the predicted phrases , and thus lacks goal-directedness .	S-5
CTR	Thoughshowed how to modify the restriction function to make top-down information available for the bottom-up completion step , Earley generation with top-down prediction still has a problem in that generating the subparts of a construction in the wrong order might lead to massive nondeterminacy or even nontermination .	S-6
OTH	partly overcame this problem by incorporating a head-driven strategy into's algorithm .	S-7
CTR	However , evaluating the head of a construction prior to its dependent subparts still suffers from efficiency problems when the head of a construction is either missing , displaced or underspecified .	S-8
CTR	Furthermore ,and others have observed that a simple head-first reordering of the grammar rules may still make insufficient restricting information available for generation unless the form of the grammar is restricted to unary or binary rules .	S-9
OTH	's Essential Arguments Approach ( EAA )is a top-down approach to generation and parsing with logic grammars that uses off-line compilation to automatically invert parser-oriented logic grammars .	S-10
OTH	The inversion process consists of both the automatic static reordering of nodes in the grammar , and the interchanging of arguments in rules with recursively defined heads .	S-11
OTH	It is based on the notion of essential arguments , arguments which must be instantiated to ensure the efficient and terminating execution of a node .	S-12
CTR	observe that the EAA is computationally infeasible , because it demands the investigation of almost all possible permutations of a grammar .	S-13
CTR	Moreover , the interchanging of arguments in recursive procedures as proposed byfails to guarantee that input and output grammars are semantically equivalent .	S-14
OTH	The Direct Inversion Approach ( DIA ) ofovercomes these problems by making the reordering process more goal-directed and developing a reformulation technique that allows the successful treatment of rules which exhibit head-recursion .	S-15
OTH	Both the EAA and the DIA were presented as approaches to the inversion of parser-oriented grammars into grammars suitable for generation .	S-16
OTH	However , both approaches can just as well take a declarative grammar specification as input to produce generator and / or parser-oriented grammars as in.	S-17
BAS	In this paper we adopt the latter theoretically more interesting perspective .	S-18
AIM	We developed a compiler for off-line optimization of phrase structure rule-based typed feature structure grammars which generalizes the techniques developed in the context of the DIA , and we advanced a typed extension of the Earley-style generator of.	S-19
TXT	Off-line compilation ( section) is used to produce grammars for the Earley-style generator ( section) .	S-20
OWN	We show that our use of off-line grammar optimization overcomes problems with empty or displaced heads .	S-21
OWN	The developed techniques are extensively tested with a large HPSG grammar for partial VP topicalization in German.	S-22
TXT	This uncovered some important constraints on the form of the phrase structure rules ( phrase structure rules ) in a grammar imposed by the compiler ( section) .	S-23
CTR	Asnoted , the main shortcoming of Earley generation is a lack of goal-directedness that results in a proliferation of edges .	S-24
OTH	tackled this shortcoming by modifying the restriction function to make top-down information available for the bottom-up completion step .	S-25
OTH	's generator follows a head-driven strategy in order to avoid inefficient evaluation orders .	S-26
OTH	More specifically , the head of the right-hand side of each grammar rule is distinguished , and distinguished categories are scanned or predicted upon first .	S-27
OTH	The resulting evaluation strategy is similar to that of the head-corner approach,: prediction follows the main flow of semantic information until a lexical pivot is reached , and only then are the head-dependent subparts of the construction built up in a bottom-up fashion .	S-28
OTH	This mixture of top-down and bottom-up information flow is crucial since the top-down semantic information from the goal category must be integrated with the bottom-up subcategorization information from the lexicon .	S-29
OTH	A strict top-down evaluation strategy suffers from what may be called head-recursion , i.e. the generation analog of left recursion in parsing .	S-30
OTH	show that a top-down evaluation strategy will fail for rules such as VPVP X , irrespective of the order of evaluation of the right-hand side categories in the rule .	S-31
CTR	By combining the off-line optimization process with a mixed bottom-up / top-down evaluation strategy , we can refrain from a complete reformulation of the grammar as , for example , in.	S-32
BAS	We further improved a typed extension of's Earley generator with a number of techniques that reduce the number of edges created during generation .	S-33
OWN	Three optimizations were especially helpful .	S-34
OWN	The first supplies each edge in the chart with two indices , a backward index pointing to the state in the chart that the edge is predicted from , and a forward index pointing to the states that are predicted from the edge .	S-35
OWN	By matching forward and backward indices , the edges that must be combined for completion can be located faster .	S-36
BAS	This indexing technique , as illustrated below , improves upon the more complex indices inand is closely related to OLDT-resolution.	S-37
OWN	Active edge 2 resulted from active edge 1 through prediction .	S-38
OWN	The backward index of edge 2 is therefore identified with the forward index of edge 1 .	S-39
OWN	Completion of an active edge results in an edge with identical backward index .	S-40
OWN	In the case of our example , this would be the steps from edge 2 to edge 3 and edge 3 to edge 4 .	S-41
OWN	As nothing gets predicted from a passive edge ( 4 ) , it does not have a forward index .	S-42
OWN	In order to use passive edge 4 for completion of an active edge , we only need to consider those edges which have a forward index identical to the backward index of 4 .	S-43
OWN	The second optimization creates a table of the categories which have been used to make predictions from .	S-44
OWN	As discussed in, such a table can be used to avoid redundant predictions without a full and expensive subsumption test .	S-45
OWN	The third indexes lexical entries which is necessary to obtain constant-time lexical access .	S-46
OWN	The optimizations of our Earley-generator lead to significant gains in efficiency .	S-47
OWN	However , despite these heuristic improvements , the problem of goal-directedness is not solved .	S-48
CTR	Empty or displaced heads present the principal goal-directedness problem for any head-driven generation approach,,, where empty head refers not just to a construction in which the head has an empty phonology , but to any construction in which the head is partially unspecified .	S-49
OWN	Since phonology does not guide generation , the phonological realization of the head of a construction plays no part in the generation of that construction .	S-50
OWN	To better illustrate the problem that underspecified heads pose , consider the sentence :	S-51
BAS	for which we adopt the argument composition analysis presented in: the subcat list of the auxiliary verb is partially instantiated in the lexicon and only becomes fully instantiated upon its combination with its verbal complement , the main verb .	S-52
OWN	The phrase structure rule that describes this construction is	S-53
OWN	Though a head-driven generator must generate first the head of the rule , nothing prescribes the order of generation of the complements of the head .	S-54
OWN	If the generator generates second the main verb then the subcat list of the main verb instantiates the subcat list of the head , and generation becomes a deterministic procedure in which complements are generated in sequence .	S-55
OWN	However , if the generator generates second some complement other than the main verb , then the subcat list of the head contains no restricting information to guide deterministic generation , and generation becomes a generate-and-test procedure in which complements are generated at random , only to be eliminated by further unifications .	S-56
OWN	Clearly then , the order of evaluation of the complements in a rule can profoundly influence the efficiency of generation , and an efficient head-driven generator must order the evaluation of the complements in a rule accordingly .	S-57
OWN	Dynamic , on-line reordering can solve the ordering problem discussed in the previous subsection , but is rather unattractive : interpreting grammar rules at run time creates much overhead , and locally determining the optimal evaluation order is often impossible .	S-58
OWN	Goal-freezing can also overcome the ordering problem , but is equally unappealing : goal-freezing is computationally expensive , it demands the procedural annotation of an otherwise declarative grammar specification , and it presupposes that a grammar writer possesses substantial computational processing expertise .	S-59
OWN	We chose instead to deal with the ordering problem by using off-line compilation to automatically optimize a grammar such that it can be used for generation , without additional provision for dealing with the evaluation order , by our Earley generator .	S-60
OWN	Our off-line grammar optimization is based on a generalization of the dataflow analysis employed in the DIA to a dataflow analysis for typed feature structure grammars .	S-61
OWN	This dataflow analysis takes as input a specification of the paths of the start category that are considered fully instantiated .	S-62
OWN	In case of generation , this means that the user annotates the path specifying the logical form , i.e. , the path ( or some of its subpaths ) , as bound .	S-63
OWN	We use the type hierarchy and an extension of the unification and generalization operations such that path annotations are preserved , to determine the flow of ( semantic ) information between the rules and the lexical entries in a grammar .	S-64
OWN	Structure sharing determines the dataflow within the rules of the grammar .	S-65
OWN	The dataflow analysis is used to determine the relative efficiency of a particular evaluation order of the right-hand side categories in a phrase structure rule by computing the maximal degree of nondeterminacy introduced by the evaluation of each of these categories .	S-66
OWN	The maximal degree of nondeterminacy introduced by a right-hand side category equals the maximal number of rules and / or lexical entries with which this category unifies given its binding annotations .	S-67
OWN	The optimal evaluation order of the right-hand side categories is found by comparing the maximal degree of nondeterminacy introduced by the evaluation of the individual categories with the degree of nondeterminacy the grammar is allowed to introduce : if the degree of nondeterminacy introduced by the evaluation of one of the right-hand side categories in a rule exceeds the admissible degree of nondeterminacy the ordering at hand is rejected .	S-68
OWN	The degree of nondeterminacy the grammar is allowed to introduce is originally set to one and consecutively incremented until the optimal evaluation order for all rules in the grammar is found .	S-69
TXT	The compilation process is illustrated on the basis of the phrase structure rule for argument composition discussed in.	S-70
OWN	Space limitations force us to abstract over the recursive optimization of the rules defining the right-hand side categories through considering only the defining lexical entries .	S-71
OWN	Unifying the user annotated start category with the left-hand side of this phrase structure rule leads to the annotation of the path specifying the logical form of the construction as bound ( see below ) .	S-72
OWN	As a result of the structure-sharing between the left-hand side of the rule and the auxiliary verb category , the - value of the auxiliary verb can be treated as bound , as well .	S-73
OWN	In addition , the paths with a value of a maximal specific type for which there are no appropriate features specified , for example , the path cat , can be considered bound :	S-74
OWN	On the basis of this annotated rule , we investigate the lexical entries defining its right-hand side categories .	S-75
OWN	The auxiliary verb category is unified with its defining lexical entries ( under preservation of the binding annotations ) .	S-76
OWN	The following is an example of such a lexical entry .	S-77
OWN	( Note that subpaths of a path marked as bound are considered bound too ) .	S-78
OWN	The binding annotations of the lexical entries defining the auxiliary verb are used to determine with how many lexical entries the right-hand side category of the rule maximally unifies , i.e. , its maximal degree of nondeterminacy .	S-79
OWN	In this case , the maximal degree of nondeterminacy that the evaluation of the auxiliary verb introduces is very low as the logical form of the auxiliary verb is considered fully instantiated .	S-80
OWN	Now we mark the paths of the defining lexical entries whose instantiation can be deduced from the type hierarchy .	S-81
OWN	To mimic the evaluation of the auxiliary verb , we determine the information common to all defining lexical entries by taking their generalization , i.e. , the most specific feature structure subsuming all , and unify the result with the original right-hand side category in the phrase structure rule .	S-82
OWN	Because both the generalization and the unification operations preserve binding annotations , this leads ( via structure-sharing ) to the annotation that the logical form of the verbal complement can be considered instantiated .	S-83
OWN	Note that the nonverbal complements do not become further instantiated .	S-84
OWN	By subsequent investigation of the maximal degree of nondeterminacy introduced by the evaluation of the complements in various permutations , we find that the logical form of a sentence only restricts the evaluation of the nonverbal complements after the evaluation of the verbal complement .	S-85
OWN	This can be verified on the basis of a sample lexical entry for a main verb .	S-86
OWN	The relative efficiency of this evaluation leads our compiler to choose	S-87
OWN	as the optimal evaluation order of our phrase structure rule for argument composition .	S-88
OWN	The optimal evaluation order for a phrase structure rule need not necessarily be head-first .	S-89
OWN	Our dataflow analysis treats heads and complements alike , and includes the head in the calculation of the optimal evaluation order of a rule .	S-90
OWN	If the evaluation of the head of a rule introduces much nondeterminacy or provides insufficient restricting information for the evaluation of its complements , our dataflow analysis might not select the head as the first category to be evaluated , and choose instead	S-91
OWN	as the optimal evaluation order .	S-92
OWN	This clearly demonstrates an extremely important consequence of using our dataflow analysis to compile a declarative grammar into a grammar optimized for generation .	S-93
OWN	Empty or displaced heads pose us no problem , since the optimal evaluation order of the right-hand side of a rule is determined regardless of the head .	S-94
OWN	Our dataflow analysis ignores the grammatical head , but identifies instead the ` processing head ' , and ( no less importantly ) the ` first processing complement ' , the ` second processing complement ' , and so on .	S-95
OWN	Our Earley generator and the described compiler for off-line grammar optimization have been extensively tested with a large HPSG grammar .	S-96
BAS	This test-grammar is based on the implementation of an analysis of partial VP topicalization in Germanin the Troll system.	S-97
OWN	Testing the developed techniques uncovered important constraints on the form of the phrase structure rules in a grammar imposed by the compiler .	S-98
OWN	The compiler is not able to find an evaluation order such that the Earley generator has sufficient restricting information to generate all subparts of the construction efficiently in particular cases of complement displacement .	S-99
OWN	More specifically , this problem arises when a complement receives essential restricting information from the head of the construction from which it has been extracted , while , at the same time , it provides essential restricting information for the complements that stayed behind .	S-100
OWN	Such a case is represented schematically in figure( see next page ) .	S-101
OWN	The first processing complement ( C1 ) of the head ( H ) has been displaced .	S-102
OWN	This is problematic in case C1 provides essential bindings for the successful evaluation of the complement C2 .	S-103
OWN	C1 can not be evaluated prior to the head and once H is evaluated it is no longer possible to evaluate C1 prior to C2 .	S-104
OWN	An example of problematic complement displacement taken from our test-grammar is given in figure( see next page ) .	S-105
OWN	The topicalized partial VP `` Anna lieben '' receives its restricting semantic information from the auxiliary verb and upon its evaluation provides essential bindings not only for the direct object , but also for the subject that stayed behind in the Mittelfeld together with the auxiliary verb .	S-106
OWN	These mutual dependencies between the subconstituents of two different local trees lead either to the unrestricted generation of the partial VP , or to the unrestricted generation of the subject in the Mittelfeld .	S-107
OWN	We handled this problem by partial executionof the filler-head rule .	S-108
OWN	This allows the evaluation of the filler right after the evaluation of the auxiliary verb , but prior to the subject .	S-109
OWN	A head-driven generator has to rely on a similar solution , as it will not be able to find a successful ordering for the local trees either , simply because it does not exist .	S-110
OWN	A potential problem for our approach constitutes the requirement that the phrase structure rules in the grammar need to have a particular degree of specificity for the generalization operation to be used successfully to mimic its evaluation .	S-111
OWN	This is best illustrated on the basis of the following , more ` schematic ' , phrase structure rule :	S-112
OWN	Underspecification of the head of the rule allows it to unify with both finite auxiliaries and finite ditransitive main verbs .	S-113
OWN	In combination with the underspecification of the complements , this allows the rule not only to be used for argument composition constructions , as discussed above , but also for constructions in which a finite main verb becomes saturated .	S-114
OWN	This means that the logical form of the nonverbal complements (and) becomes available either upon the evaluation of the complement tagged( in case of argument composition ) , or upon the evaluation of the finite verb ( in case the head of the rule is a ditransitive main verb ) .	S-115
OWN	As a result , the use of generalization does not suffice to mimic the evaluation of the respective right-hand side categories .	S-116
OWN	Because both verbal categories have defining lexical entries which do not instantiate the logical form of the nonverbal arguments , the dataflow analysis leads to the conclusion that the logical form of the nonverbal complements never becomes instantiated .	S-117
OWN	This causes the rejection of all possible evaluation orders for this rule , as the evaluation of an unrestricted nonverbal complement clearly exceeds the allowed maximal degree of nondeterminacy of the grammar .	S-118
OWN	We are therefore forced to split this schematic phrase structure rule into two more specific rules at least during the optimization process .	S-119
OWN	It is important to note that this is a consequence of a general limitation of dataflow analysis.	S-120
AIM	An innovative approach to HPSG processing is described that uses an off-line compiler to automatically prime a declarative grammar for generation or parsing , and inputs the primed grammar to an advanced Earley processor .	S-121
BAS	Our off-line compiler extends the techniques developed in the context of the DIA in that it compiles typed feature structure grammars , rather than simple logic grammars .	S-122
OWN	The approach allows efficient bidirectional processing with similar generation and parsing times .	S-123
CTR	It is shown that combining off-line techniques with an advanced Earley-style generator provides an elegant solution to the general problem that empty or displaced heads pose for conventional head-driven generation .	S-124
OWN	The developed off-line compilation techniques make crucial use of the fundamental properties of the HPSG formalism .	S-125
OWN	The monostratal , uniform treatment of syntax , semantics and phonology supports dataflow analysis , which is used extensively to provide the information upon which off-line compilation is based .	S-126
OWN	Our compiler uses the type hierarchy to determine paths with a value of a minimal type without appropriate features as bound .	S-127
OWN	However , the equivalent of this kind of minimal types in untyped feature structure grammars are constants which can be used in a similar fashion for off-line optimization .	S-128
