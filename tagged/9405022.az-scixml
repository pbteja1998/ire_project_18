<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE PAPER SYSTEM "paper-structure.dtd">
<PAPER>
<METADATA>
<FILENO>9405022</FILENO>
<REFLABEL>Samuelsson 1994c</REFLABEL>
<APPEARED><CONFERENCE>ACL</CONFERENCE><YEAR>1994</YEAR></APPEARED>
<CLASSIFICATION> Lg.Pr.Gr.Fm </CLASSIFICATION>
</METADATA>
<TITLE> Grammar Specialization through Entropy Thresholds </TITLE>
<AUTHORLIST>
<AUTHOR>Christer Samuelsson</AUTHOR>
</AUTHORLIST>
<ABSTRACT>
<A-S ID='A-0' AZ='AIM'> Explanation-based generalization is used to extract a specialized grammar from the original one using a training corpus of parse trees . </A-S>
<A-S ID='A-1' AZ='OWN'> This allows very much faster parsing and gives a lower error rate , at the price of a small loss in coverage . </A-S>
<A-S ID='A-2' AZ='CTR' DOCUMENTC='S-19;S-18'> Previously , it has been necessary to specify the tree-cutting criteria ( or operationality criteria ) manually ; here they are derived automatically from the training set and the desired coverage of the specialized grammar . </A-S>
<A-S ID='A-3' AZ='OWN'> This is done by assigning an entropy value to each node in the parse trees and cutting in the nodes with sufficiently high entropy values . </A-S>
</ABSTRACT>
<BODY>
<DIV DEPTH='1'>
<HEADER ID='H-0'> Background </HEADER>
<P>
<S ID='S-0' AZ='OTH'> Previous work by <REFAUTHOR>Manny Rayner</REFAUTHOR> and the author <REF TYPE='P' SELF="YES">Samuelsson and Rayner 1991</REF> attempts to tailor an existing natural-language system to a specific application domain by extracting a specialized grammar from the original one using a large set of training examples . </S>
<S ID='S-1' AZ='OTH'> The training set is a treebank consisting of implicit parse trees that each specify a verified analysis of an input sentence . </S>
<S ID='S-2' AZ='OTH'> The parse trees are implicit in the sense that each node in the tree is the ( mnemonic ) name of the grammar rule resolved on at that point , rather than the syntactic category of the LHS of the grammar rule as is the case in an ordinary parse tree . </S>
<S ID='S-3' AZ='OTH'> Figure <CREF/> shows five examples of implicit parse trees . </S>
<S ID='S-4' AZ='OTH'> The analyses are verified in the sense that each analysis has been judged to be the preferred one for that input sentence by a human evaluator using a semi-automatic evaluation method . </S>
</P>
<P>
<S ID='S-5' AZ='OTH'> A new grammar is created by cutting up each implicit parse tree in the treebank at appropriate points , creating a set of new rules that consist of chunks of original grammar rules . </S>
<S ID='S-6' AZ='OTH'> The LHS of each new rule will be the LHS phrase of the original grammar rule at the root of the tree chunk and the RHS will be the RHS phrases of the rules in the leaves of the tree chunk . </S>
<S ID='S-7' AZ='OTH'> For example , cutting up the first parse tree of Figure <CREF/> at the NP of the rule vp_v_np yields rules 2 and 3 of Figure <CREF/> . </S>
</P>
<P>
<S ID='S-8' AZ='OTH'> The idea behind this is to create a specialized grammar that retains a high coverage but allows very much faster parsing . </S>
<S ID='S-9' AZ='OTH'> This has turned out to be possible -- speedups compared to using the original grammar of in median 60 times were achieved at a cost in coverage of about ten percent <REF SELF="YES" TYPE='P'>Samuelsson 1994a</REF> . </S>
<S ID='S-10' AZ='OTH'> Another benefit from the method is a decreased error rate when the system is required to select a preferred analysis . </S>
<S ID='S-11' AZ='OTH'> In these experiments the scheme was applied to the grammar of a version of the SRI Core Language Engine <REF TYPE='P'>Alshawi 1992</REF> adapted to the ATIS domain for a speech-translation task <REF TYPE='P' SELF="YES">Rayner et al. 1993</REF> and large corpora of real user data collected using Wizard-of-Oz simulation . </S>
<S ID='S-12' AZ='OTH'> The resulting specialized grammar was compiled into LR parsing tables , and a special LR parser exploited their special properties <REF SELF="YES" TYPE='P'>Samuelsson 1994b</REF> . </S>
</P>
<P>
<S ID='S-13' AZ='BAS'> The technical vehicle previously used to extract the specialized grammar is explanation-based generalization ( EBG ) <REF TYPE='P'>Mitchell et al. 1986</REF> . </S>
<S ID='S-14' AZ='OTH'> Very briefly , this consists of redoing the derivation of each training example top-down by letting the implicit parse tree drive a rule expansion process , and aborting the expansion of the specialized rule currently being extracted if the current node of the implicit parse tree meets a set of tree-cutting criteria . </S>
<S ID='S-15' AZ='OTH'> In this case the extraction process is invoked recursively to extract subrules rooted in the current node . </S>
<S ID='S-16' AZ='OTH'> The tree-cutting criteria can be local ( `` The LHS of the original grammar rule is an NP , '' ) or dependent on the rest of the parse tree ( `` that doesn't dominate the empty string only , '' ) and previous choices of nodes to cut at ( `` and there is no cut above the current node that is also labelled NP. '' ) . </S>
</P>
<P>
<S ID='S-17' AZ='CTR'> A problem not fully explored yet is how to arrive at an optimal choice of tree-cutting criteria . </S>
<S ID='S-18' AZ='CTR'> In the previous scheme , these must be specified manually , and the choice is left to the designer 's intuitions . </S>
<S ID='S-19' ABSTRACTC='A-2' AZ='AIM'> This article addresses the problem of automating this process and presents a method where the nodes to cut at are selected automatically using the information-theoretical concept of entropy . </S>
<S ID='S-20' AZ='OTH'> Entropy is well-known from physics , but the concept of perplexity is perhaps better known in the speech-recognition and natural-language communities . </S>
<S ID='S-21' AZ='TXT'> For this reason , we will review the concept of entropy at this point , and discuss its relation to perplexity . </S>
</P>
<DIV DEPTH='2'>
<HEADER ID='H-1'> Entropy </HEADER>
<P>
<S ID='S-22' AZ='BKG'> Entropy is a measure of disorder . </S>
<S ID='S-23' AZ='BKG'> Assume for example that a physical system can be in any of N states , and that it will be in state <EQN/> with probability <EQN/> . </S>
<S ID='S-24' AZ='BKG'> The entropy S of that system is then  </S>
</P>
<IMAGE ID='I-0'/>
<P>
<S ID='S-25' AZ='BKG'> If each state has equal probability , i.e. if <EQN/> for all i , then </S>
</P>
<IMAGE ID='I-1'/>
<P>
<S ID='S-26' AZ='BKG'> In this case the entropy is simply the logarithm of the number of states the system can be in . </S>
</P>
<P>
<S ID='S-27' AZ='BKG'> To take a linguistic example , assume that we are trying to predict the next word in a word string from the previous ones . </S>
<S ID='S-28' AZ='BKG'> Let the next word be <EQN/> and the previous word string <EQN/> . </S>
<S ID='S-29' AZ='BKG'> Assume further that we have a language model that estimates the probability of each possible next word ( conditional on the previous word string ) . </S>
<S ID='S-30' AZ='BKG'> Let these probabilities be <EQN/> for i = 1 , ... , N for the N possible next words <EQN/> , i.e. <EQN/> . </S>
<S ID='S-31' AZ='BKG'> The entropy is then a measure of how hard this prediction problem is : </S>
</P>
<IMAGE ID='I-2'/>
<P>
<S ID='S-32' AZ='BKG'> If all words have equal probability , the entropy is the logarithm of the branching factor at this point in the input string . </S>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-2'> Perplexity </HEADER>
<P>
<S ID='S-33' AZ='BKG'> Perplexity is related to entropy as follows . </S>
<S ID='S-34' AZ='BKG'> The observed perplexity <EQN/> of a language model with respect to an ( imaginary ) infinite test sequence <EQN/> is defined through the formula <REF TYPE='P'>Jelinek 1990</REF> . </S>
</P>
<IMAGE ID='I-3'/>
<P>
<S ID='S-35' AZ='BKG'> Here <EQN/> denotes the probability of the word string <EQN/> </S>
</P>
<P>
<S ID='S-36' AZ='BKG'> Since we cannot experimentally measure infinite limits , we terminate after a finite test string <EQN/> , arriving at the measured perplexity <EQN/> : </S>
</P>
<IMAGE ID='I-4'/>
<P>
<S ID='S-37' AZ='BKG'> Rewriting <EQN/> as <EQN/> gives us </S>
</P>
<IMAGE ID='I-5'/>
<P>
<S ID='S-38' AZ='BKG'> Let us call the exponential of the expectation value of <EQN/> the local perplexity <EQN/> , which can be used as a measure of the information content of the initial String . </S>
</P>
<IMAGE ID='I-6'/>
<P>
<S ID='S-39' AZ='BKG'> Here <EQN/> is the expectation value of <EQN/> and the summation is carried out over all N possible next words <EQN/> . </S>
<S ID='S-40' AZ='BKG'> Comparing this with the last equation of the previous section , we see that this is precisely the entropy S at point k in the input string . </S>
<S ID='S-41' AZ='BKG'> Thus , the entropy is the logarithm of the local perplexity at a given point in the word string . </S>
<S ID='S-42' AZ='BKG'> If all words are equally probable , then the local perplexity is simply the branching factor at this point . </S>
<S ID='S-43' AZ='BKG'> If the probabilities differ , the local perplexity can be viewed as a generalized branching factor that takes this into account . </S>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-3'> Tree Entropy </HEADER>
<P>
<S ID='S-44' AZ='TXT'> We now turn to the task of calculating the entropy of a node in a parse tree . </S>
<S ID='S-45' AZ='OWN'> This can be done in many different ways ; we will only describe two different ones here . </S>
</P>
<P>
<S ID='S-46' AZ='OWN'> Consider the small test and training sets of Figure <CREF/> . </S>
</P>
<IMAGE ID='I-7'/>
<P>
<S ID='S-47' AZ='OWN'> Assume that we wish to calculate the entropy of the phrases of the rule PP <EQN/> Prep NP , which is named pp_prep_np . </S>
<S ID='S-48' AZ='OWN'> In the training set , the LHS PP is attached to the RHS PP of the rule np_np_pp in two cases and to the RHS PP of the rule vp_vp_pp in one case , giving it the entropy <EQN/> . </S>
<S ID='S-49' AZ='OWN'> The RHS preposition Prep is always a lexical lookup , and the entropy is thus zero , while the RHS NP in one case attaches to the LHS of rule np_det_np , in one case to the LHS of rule np_num , and in one case is a lexical lookup , and the resulting entropy is thus <EQN/> . </S>
</P>
<P>
<S ID='S-50' AZ='OWN'> The complete table is given here : </S>
</P>
<IMAGE ID='I-8'/>
<P>
<S ID='S-51' AZ='OWN'> If we want to calculate the entropy of a particular node in a parse tree , we can either simply use the phrase entropy of the RHS node , or take the sum of the entropies of the two phrases that are unified in this node . </S>
<S ID='S-52' AZ='OWN'> For example , the entropy when the RHS NP of the rule pp_prep_np is unified with the LHS of the rule np_det_n will in the former case be 1.10 and in the latter case be 1.10 + 1.33 = 2.43 . </S>
</P>
</DIV>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-4'> Scheme Overview </HEADER>
<P>
<S ID='S-53' AZ='OWN'> In the following scheme , the desired coverage of the specialized grammar is prescribed , and the parse trees are cut up at appropriate places without having to specify the tree-cutting criteria manually : </S>
</P>
<P>
<S ID='S-54' AZ='OWN'> Index the treebank in an and-or tree where the or-nodes correspond to alternative choices of grammar rules to expand with and the and-nodes correspond to the RHS phrases of each grammar rule . </S>
<S ID='S-55' AZ='OWN'> Cutting up the parse trees will involve selecting a set of or-nodes in the and-or tree . </S>
<S ID='S-56' AZ='OWN'> Let us call these nodes `` cutnodes '' .  </S>
</P>
<P>
<S ID='S-57' AZ='OWN'> Calculate the entropy of each or-node . </S>
<S ID='S-58' AZ='OWN'> We will cut at each node whose entropy exceeds a threshold value . </S>
<S ID='S-59' AZ='OWN'> The rationale for this is that we wish to cut up the parse trees where we can expect a lot of variation i.e. where it is difficult to predict which rule will be resolved on next . </S>
<S ID='S-60' AZ='OWN'> This corresponds exactly to the nodes in the and-or tree that exhibit high entropy values .  </S>
</P>
<P>
<S ID='S-61' AZ='OWN'> The nodes of the and-or tree must be partitioned into equivalence classes dependent on the choice of cutnodes in order to avoid redundant derivations at parse time . </S>
<S ID='S-62' AZ='OWN'> Thus , selecting some particular node as a cutnode may cause other nodes to also become cutnodes , even though their entropies are not above the threshold . </S>
</P>
<P>
<S ID='S-63' AZ='OWN'> Determine a threshold entropy that yields the desired coverage . </S>
<S ID='S-64' AZ='OWN'> This can be done using for example interval bisection . </S>
</P>
<P>
<S ID='S-65' AZ='OWN'> Cut up the training examples by matching them against the and-or tree and cutting at the determined cutnodes . </S>
</P>
<P>
<S ID='S-66' AZ='OWN'> It is interesting to note that a textbook method for constructing decision trees for classification from attribute-value pairs is to minimize the ( weighted average of the ) remaining entropy over all possible choices of root attribute <REF TYPE='P'>Quinlan 1986</REF> . </S>
</P>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-5'> Detailed Scheme </HEADER>
<P>
<S ID='S-67' AZ='OWN'> First , the treebank is partitioned into a training set and a test set . </S>
<S ID='S-68' AZ='OWN'> The training set will be indexed in an and-or tree and used to extract the specialized rules . </S>
<S ID='S-69' AZ='OWN'> The test set will be used to check the coverage of the set of extracted rules . </S>
</P>
<DIV DEPTH='2'>
<HEADER ID='H-6'> Indexing the treebank </HEADER>
<P>
<S ID='S-70' AZ='OWN'> Then , the set of implicit parse trees is stored in an and-or tree . </S>
<S ID='S-71' AZ='OWN'> The parse trees have the general form of a rule identifier Id dominating a list of subtrees or a word of the training sentence . </S>
<S ID='S-72' AZ='OWN'> From the current or-node of the and-or tree there will be arcs labelled with rule identifiers corresponding to previously stored parse trees . </S>
<S ID='S-73' AZ='OWN'> From this or-node we follow an arc labelled Id , or add a new one if there is none . </S>
<S ID='S-74' AZ='OWN'> We then reach ( or add ) an and-node indicating the RHS phrases of the grammar rule named Id. Here we follow each arc leading out from this and-node in turn to accommodate all the subtrees in the list . </S>
<S ID='S-75' AZ='OWN'> Each such arc leads to an or-node . </S>
<S ID='S-76' AZ='OWN'> We have now reached a point of recursion and can index the corresponding subtree . </S>
<S ID='S-77' AZ='OWN'> The recursion terminates if Id is the special rule identifier lex and thus dominates a word of the training sentence , rather than a list of subtrees . </S>
</P>
<P>
<S ID='S-78' AZ='OWN'> Indexing the four training examples of Figure <CREF/> will result in the and-or tree of Figure <CREF/> . </S>
<IMAGE ID='I-9'/>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-7'> Finding the cutnodes </HEADER>
<P>
<S ID='S-79' AZ='OWN'> Next , we find the set of nodes whose entropies exceed a threshold value . </S>
<S ID='S-80' AZ='OWN'> First we need to calculate the entropy of each or-node . </S>
<S ID='S-81' AZ='OWN'> We will here describe three different ways of doing this , but there are many others . </S>
<S ID='S-82' AZ='OWN'> Before doing this , though , we will discuss the question of redundancy in the resulting set of specialized rules . </S>
</P>
<P>
<S ID='S-83' AZ='OWN'> We must equate the cutnodes that correspond to the same type of phrase . </S>
<S ID='S-84' AZ='OWN'> This means that if we cut at a node corresponding to e.g. an NP , i.e. where the arcs incident from it are labelled with grammar rules whose left-hand-sides are NPs , we must allow all specialized NP rules to be potentially applicable at this point , not just the ones that are rooted in this node . </S>
<S ID='S-85' AZ='OWN'> This requires that we by transitivity equate the nodes that are dominated by a cutnode in a structurally equivalent way ; if there is a path from a cutnode <EQN/> to a node <EQN/> and a path from a cutnode <EQN/> to a node <EQN/> with an identical sequence of labels , the two nodes <EQN/> and <EQN/> must be equated . </S>
<S ID='S-86' AZ='OWN'> Now if <EQN/> is a cutnode , then <EQN/> must also be a cutnode even if it has a low entropy value . </S>
<S ID='S-87' AZ='OWN'> The following iterative scheme accomplishes this : </S>
<IMAGE ID='I-10'/>
</P>
<P>
<S ID='S-88' AZ='OWN'> Here <EQN/> is the set of cutnodes <EQN/> augmented with those induced in one step by selecting <EQN/> as the set of cutnodes . </S>
<S ID='S-89' AZ='OWN'> In practice this was accomplished by compiling an and-or graph from the and-or tree and the set of selected cutnodes , where each set of equated nodes constituted a vertex of the graph , and traversing it . </S>
</P>
<P>
<S ID='S-90' AZ='OWN'> In the simplest scheme for calculating the entropy of an or-node , only the RHS phrase of the parent rule , i.e. the dominating and-node , contributes to the entropy , and there is in fact no need to employ an and-or tree at all , since the tree-cutting criterion becomes local to the parse tree being cut up . </S>
</P>
<P>
<S ID='S-91' AZ='OWN'> In a slightly more elaborate scheme , we sum over the entropies of the nodes of the parse trees that match this node of the and-or tree . </S>
<S ID='S-92' AZ='OWN'> However , instead of letting each daughter node contribute with the full entropy of the LHS phrase of the corresponding grammar rule , these entropies are weighted with the relative frequency of use of each alternative choice of grammar rule . </S>
</P>
<P>
<S ID='S-93' AZ='OWN'> For example , the entropy of node n3 of the and-or tree of Figure <CREF/> will be calculated as follows : </S>
<S ID='S-94' AZ='OWN'> The mother rule vp_v_np will contribute the entropy associated with the RHS NP , which is , referring to the table above , 0.64 . </S>
<S ID='S-95' AZ='OWN'> There are 2 choices of rules to resolve on , namely np_det_n and np_np_pp with relative frequencies <EQN/> and <EQN/> respectively . </S>
<S ID='S-96' AZ='OWN'> Again referring to the entropy table above , we find that the LHS phrases of these rules have entropy 1.33 and 0.00 respectively . </S>
<S ID='S-97' AZ='OWN'> This results in the following entropy for node n3 : </S>
<IMAGE ID='I-11'/>
</P>
<P>
<S ID='S-98' AZ='OWN'> The following function determines the set of cutnodes N that either exceed the entropy threshold , or are induced by structural equivalence : </S>
<IMAGE ID='I-12'/>
</P>
<P>
<S ID='S-99' AZ='OWN'> Here S (n) is the entropy of node n . </S>
<S ID='S-100' AZ='OWN'> In a third version of the scheme , the relative frequencies of the daughters of the or-nodes are used directly to calculate the node entropy : </S>
<IMAGE ID='I-13'/>
</P>
<P>
<S ID='S-101' AZ='OWN'> Here A is the set of arcs , and <EQN/> is an arc from n to <EQN/> . </S>
<S ID='S-102' AZ='OWN'> This is basically the entropy used in <REF TYPE='A'>Quinlan 1986</REF> . </S>
<S ID='S-103' AZ='OWN'> Unfortunately , this tends to promote daughters of cutnodes to in turn become cutnodes , and also results in a problem with instability , especially in conjunction with the additional constraints discussed in a later section , since the entropy of each node is now dependent on the choice of cutnodes . </S>
<S ID='S-104' AZ='OWN'> We must redefine the function N(S) accordingly : </S>
<IMAGE ID='I-14'/>
</P>
<P>
<S ID='S-105' AZ='OWN'>  Here <EQN/> is the entropy of node n given that the set of cutnodes is <EQN/> . </S>
<S ID='S-106' AZ='OWN'> Convergence can be ensured by modifying the termination criterion to be  </S>
<IMAGE ID='I-15'/>
</P>
<P>
<S ID='S-107' AZ='OWN'> for some appropriate set metric <EQN/> ( e.g. the size of the symmetric difference ) and norm-like function <EQN/> ( e.g. ten percent of the sum of the sizes ) , but this is to little avail , since we are not interested in solutions far away from the initial assignment of cutnodes . </S>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-8'> Finding the threshold </HEADER>
<P>
<S ID='S-108' AZ='OWN'> We will use a simple interval-bisection technique for finding the appropriate threshold value . </S>
<S ID='S-109' AZ='OWN'> We operate with a range where the lower bound gives at least the desired coverage , but where the higher bound doesn't . </S>
<S ID='S-110' AZ='OWN'> We will take the midpoint of the range , find the cutnodes corresponding to this value of the threshold , and check if this gives us the desired coverage . </S>
<S ID='S-111' AZ='OWN'> If it does , this becomes the new lower bound , otherwise it becomes the new upper bound . </S>
<S ID='S-112' AZ='OWN'> If the lower and upper bounds are close to each other , we stop and return the nodes corresponding to the lower bound . </S>
<S ID='S-113' AZ='OWN'> This termination criterion can of course be replaced with something more elaborate . </S>
<S ID='S-114' AZ='OWN'> This can be implemented as follows : </S>
<IMAGE ID='I-16'/>
</P>
<P>
<S ID='S-115' AZ='OWN'> Here C(N) is the coverage on the test set of the specialized grammar determined by the set of cutnodes N . </S>
<S ID='S-116' AZ='OWN'> Actually , we also need to handle the boundary case where no assignment of cutnodes gives the required coverage . </S>
<S ID='S-117' AZ='OWN'> Likewise , the coverages of the upper and lower bound may be far apart even though the entropy difference is small , and vice versa . </S>
<S ID='S-118' AZ='OWN'> These problems can readily be taken care of by modifying the termination criterion , but the solutions have been omitted for the sake of clarity . </S>
</P>
<P>
<S ID='S-119' AZ='OWN'> In the running example , using the weighted sum of the phrase entropies as the node entropy , if any threshold value less than 1.08 is chosen , this will yield any desired coverage , since the single test example of Figure <CREF/> is then covered . </S>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-9'> Retrieving the specialized rules </HEADER>
<P>
<S ID='S-120' AZ='OWN'> When retrieving the specialized rules , we will match each training example against the and-or tree . </S>
<S ID='S-121' AZ='OWN'> If the current node is a cutnode , we will cut at this point in the training example . </S>
<S ID='S-122' AZ='OWN'> The resulting rules will be the set of cut-up training examples . </S>
<S ID='S-123' AZ='OWN'> A threshold value of say 1.00 in our example will yield the set of cutnodes <EQN/> and result in the set of specialized rules of Figure <CREF/> . </S>
<IMAGE ID='I-17'/>
<IMAGE ID='I-18'/>
</P>
<P>
<S ID='S-124' AZ='OWN'> If we simply let the and-or tree determine the set of specialized rules , instead of using it to cut up the training examples , we will in general arrive at a larger number of rules , since some combinations of choices in the and-or tree may not correspond to any training example . </S>
<S ID='S-125' AZ='OWN'> If this latter strategy is used in our example , this will give us the two extra rules of Figure <CREF/> . </S>
<S ID='S-126' AZ='OWN'> Note that they not correspond to any training example . </S>
</P>
</DIV>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-10'> Additional Constraints </HEADER>
<P>
<S ID='S-127' AZ='OWN'> As mentioned at the beginning , the specialized grammar is compiled into LR parsing tables . </S>
<S ID='S-128' AZ='OWN'> Just finding any set of cutnodes that yields the desired coverage will not necessarily result in a grammar that is well suited for LR parsing . </S>
<S ID='S-129' AZ='OWN'> In particular , LR parsers , like any other parsers employing a bottom-up parsing strategy , do not blend well with empty productions . </S>
<S ID='S-130' AZ='OWN'> This is because without top-down filtering , any empty production is applicable at any point in the input string , and a naive bottom-up parser will loop indefinitely . </S>
<S ID='S-131' AZ='OWN'> The LR parsing tables constitute a type of top-down filtering , but this may not be sufficient to guarantee termination , and in any case , a lot of spurious applications of empty productions will most likely take place , degrading performance . </S>
<S ID='S-132' AZ='OWN'> For these reasons we will not allow learned rules whose RHSs are empty , but simply refrain from cutting in nodes of the parse trees that do not dominate at least one lexical lookup . </S>
</P>
<P>
<S ID='S-133' AZ='OWN'> Even so , the scheme described this far is not totally successful , the performance is not as good as using hand-coded tree-cutting criteria . </S>
<S ID='S-134' AZ='OWN'> This is conjectured to be an effect of the reduction lengths being far too short . </S>
<S ID='S-135' AZ='OWN'> The first reason for this is that for any spurious rule reduction to take place , the corresponding RHS phrases must be on the stack . </S>
<S ID='S-136' AZ='OWN'> The likelihood for this to happen by chance decreases drastically with increased rule length . </S>
<S ID='S-137' AZ='OWN'> A second reason for this is that the number of states visited will decrease with increasing reduction length . </S>
<S ID='S-138' AZ='OWN'> This can most easily be seen by noting that the number of states visited by a deterministic LR parser equals the number of shift actions plus the number of reductions , and equals the number of nodes in the corresponding parse tree , and the longer the reductions , the more shallow the parse tree . </S>
</P>
<P>
<S ID='S-139' AZ='OWN'> The hand-coded operationality criteria result in an average rule length of four , and a distribution of reduction lengths that is such that only 17 percent are of length one and 11 percent are of length two . </S>
<S ID='S-140' AZ='OWN'> This is in sharp contrast to what the above scheme accomplishes ; the corresponding figures are about 20 or 30 percent each for lengths one and two . </S>
</P>
<P>
<S ID='S-141' AZ='OWN'> An attempted solution to this problem is to impose restrictions on neighbouring cutnodes . </S>
<S ID='S-142' AZ='OWN'> This can be done in several ways ; one that has been tested is to select for each rule the RHS phrase with the least entropy , and prescribe that if a node corresponding to the LHS of the rule is chosen as a cutnode , then no node corresponding to this RHS phrase may be chosen as a cutnode , and vice versa . </S>
<S ID='S-143' AZ='OWN'> In case of such a conflict , the node ( class ) with the lowest entropy is removed from the set of cutnodes . </S>
</P>
<P>
<S ID='S-144' AZ='OWN'> We modify the function <EQN/> to handle this :  </S>
<IMAGE ID='I-19'/>
</P>
<P>
<S ID='S-145' AZ='OWN'> Here <EQN/> is the set of nodes in <EQN/> that should be removed to avoid violating the constraints on neighbouring cutnodes . </S>
<S ID='S-146' AZ='OWN'> It is also necessary to modify the termination criterion as was done for the function <EQN/> above . </S>
<S ID='S-147' AZ='OWN'> Now we can no longer safely assume that the coverage increases with decreased entropy , and we must also modify the interval-bisection scheme to handle this . </S>
<S ID='S-148' AZ='OWN'> It has proved reasonable to assume that the coverage is monotone on both sides of some maximum , which simplifies this task considerably . </S>
</P>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-11'> Experimental Results </HEADER>
<P>
<S ID='S-149' AZ='OWN'> A module realizing this scheme has been implemented and applied to the very setup used for the previous experiments with the hand-coded tree-cutting criteria <REF SELF="YES" TYPE='P'>Samuelsson 1994a</REF> . </S>
<S ID='S-150' AZ='OWN'> 2100 of the verified parse trees constituted the training set , while 230 of them were used for the test set . </S>
<S ID='S-151' AZ='OWN' TYPE='ITEM'> The table below summarizes the results for some grammars of different coverage extracted using : </S>
</P>
<P>
<S ID='S-152' TYPE='ITEM' AZ='OWN'> Hand-coded tree-cutting criteria . </S>
<S ID='S-153' TYPE='ITEM' AZ='OWN'> Induced tree-cutting criteria where the node entropy was taken to be the phrase entropy of the RHS phrase of the dominating grammar rule . </S>
<S ID='S-154' TYPE='ITEM' AZ='OWN'> Induced tree-cutting criteria where the node entropy was the sum of the phrase entropy of the RHS phrase of the dominating grammar rule and the weighted sum of the phrase entropies of the LHSs of the alternative choices of grammar rules to resolve on . </S>
</P>
<P>
<S ID='S-155' AZ='OWN'> In the latter two cases experiments were carried out both with and without the restrictions on neighbouring cutnodes discussed in the previous section . </S>
<IMAGE ID='I-20'/>
<IMAGE ID='I-21'/>
<IMAGE ID='I-22'/>
<IMAGE ID='I-23'/>
<IMAGE ID='I-24'/>
</P>
<P>
<S ID='S-156' AZ='OWN'> With the mixed entropy scheme it seems important to include the restrictions on neighbouring cutnodes , while this does not seem to be the case with the RHS phrase entropy scheme . </S>
<S ID='S-157' AZ='OWN'> A potential explanation for the significantly higher average parsing times for all grammars extracted using the induced tree-cutting criteria is that these are in general recursive , while the hand-coded criteria do not allow recursion , and thus only produce grammars that generate finite languages . </S>
</P>
<P>
<S ID='S-158' AZ='OWN'> Although the hand-coded tree-cutting criteria are substantially better than the induced ones , we must remember that the former produce a grammar that in median allows 60 times faster processing than the original grammar and parser do . </S>
<S ID='S-159' AZ='OWN'> This means that even if the induced criteria produce grammars that are a factor two or three slower than this , they are still approximately one and a half order of magnitude faster than the original setup . </S>
<S ID='S-160' AZ='OWN'> Also , this is by no means a closed research issue , but merely a first attempt to realize the scheme , and there is no doubt in my mind that it can be improved on most substantially . </S>
</P>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-12'> Summary </HEADER>
<P>
<S ID='S-161' AZ='AIM'> This article proposes a method for automatically finding the appropriate tree-cutting criteria in the EBG scheme , rather than having to hand-code them . </S>
<S ID='S-162' AZ='BAS'> The EBG scheme has previously proved most successful for tuning a natural-language grammar to a specific application domain and thereby achieve very much faster parsing , at the cost of a small reduction in coverage . </S>
</P>
<P>
<S ID='S-163' AZ='OWN'> Instruments have been developed and tested for controlling the coverage and for avoiding a large number of short reductions , which is argued to be the main source to poor parser performance . </S>
<S ID='S-164' AZ='OWN'> Although these instruments are currently slightly too blunt to enable producing grammars with the same high performance as the hand-coded tree-cutting criteria , they can most probably be sharpened by future research , and in particular refined to achieve the delicate balance between high coverage and a distribution of reduction lengths that is sufficiently biased towards long reductions . </S>
<S ID='S-165' AZ='OWN'> Also , banning recursion by category specialization , i.e. by for example distinguishing NPs that dominate other NPs from those that do not , will be investigated , since this is believed to be an important ingredient in the version of the scheme employing hand-coded tree-cutting criteria . </S>
</P>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-13'> Acknowledgements </HEADER>
<P>
<S ID='S-166' AZ='OWN'> This research was made possible by the basic research programme at the Swedish Institute of Computer Science ( SICS ) . </S>
<S ID='S-167' AZ='OWN'> I wish to thank Manny Rayner of SRI International , Cambridge , for help and support in matters pertaining to the treebank , and for enlightening discussions of the scheme as a whole . </S>
<S ID='S-168' AZ='OWN'> I also wish to thank the NLP group at SICS for contributing to a very conductive atmosphere to work in , and in particular Ivan Bretan for valuable comments on draft versions of this article . </S>
<S ID='S-169' AZ='OWN'> Finally , I wish to thank the anonymous reviewers for their comments . </S>
</P>
</DIV>
</BODY>
<REFERENCELIST>
<REFERENCE>
Hiyan <SURNAME>Alshawi</SURNAME>, editor.
The Core Language Engine,
MIT Press <DATE>1992</DATE>.
</REFERENCE>
<REFERENCE>
Fred <SURNAME>Jelinek</SURNAME>.
``Self-Organizing Language Models for Speech Recognition'',
in Readings in Speech Recognition, pp. 450-506,
Morgan Kaufmann <DATE>1990</DATE>.
</REFERENCE>
<REFERENCE>
Tom M. <SURNAME>Mitchell</SURNAME>, Richard M. <SURNAME>Keller</SURNAME> and Smadar T. <SURNAME>Kedar-Cabelli</SURNAME>.
``Explanation-Based Generalization: A Unifying View'',
in Machine Learning 1, No. 1, pp. 47-80, <DATE>1986</DATE>.
</REFERENCE>
<REFERENCE>
J. Ross <SURNAME>Quinlan</SURNAME>.
``Induction of Decision Trees'',
in Machine Learning 1, No. 1, pp. 81-107, <DATE>1986</DATE>.
</REFERENCE>
<REFERENCE>
M. <SURNAME>Rayner</SURNAME>, H. <SURNAME>Alshawi</SURNAME>, I. <SURNAME>Bretan</SURNAME>, D. <SURNAME>Carter</SURNAME>, V. <SURNAME>Digalakis</SURNAME>, B. <SURNAME>Gambck</SURNAME>,
J. <SURNAME>Kaja</SURNAME>, J. <SURNAME>Karlgren</SURNAME>, B. <SURNAME>Lyberg</SURNAME>, P. <SURNAME>Price</SURNAME>, S. <SURNAME>Pulman</SURNAME> and C. <SURNAME>Samuelsson</SURNAME>.
``A Speech to Speech Translation System Built From Standard
Components'',
in Procs. ARPA Workshop on Human Language Technology,
Princeton, NJ <DATE>1993</DATE>.
</REFERENCE>
<REFERENCE>
Christer <SURNAME>Samuelsson</SURNAME>.
Fast Natural-Language Parsing Using Explanation-Based Learning,
PhD thesis, Royal Institute of Technology, Stockholm, Sweden <DATE>1994</DATE>.
</REFERENCE>
<REFERENCE>
Christer <SURNAME>Samuelsson</SURNAME>.
``Notes on LR Parser Design'' <DATE>to appear</DATE> in
Procs. 15th International Conference on Computational Linguistics,
Kyoto, Japan <DATE>1994</DATE>.
</REFERENCE>
<REFERENCE>
Christer <SURNAME>Samuelsson</SURNAME> and Manny <SURNAME>Rayner</SURNAME>.
``Quantitative Evaluation of Explanation-Based Learning as an
Optimization Tool for a Large-Scale Natural Language System'',
in Procs. 12th International Joint Conference on Artificial
Intelligence, pp. 609-615, Sydney, Australia <DATE>1991</DATE>.
</REFERENCE>
</REFERENCELIST>
</PAPER>
