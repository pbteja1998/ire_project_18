OTH	show that Linear Indexed Grammars ( LIG ) can be processed in polynomial time by exploiting constraints which make possible the extensive use of structure-sharing .	A-0
AIM	This paper describes a formalism that is more powerful than LIG , but which can also be processed in polynomial time using similar techniques .	A-1
OWN	The formalism , which we refer to as Partially Linear PATR ( PLPATR ) manipulates feature structures rather than stacks .	A-2
BKG	Unification-based grammar formalisms can be viewed as generalizations of Context-Free Grammars ( CFG ) where the nonterminal symbols are replaced by an infinite domain of feature structures .	S-0
BKG	Much of their popularity stems from the way in which syntactic generalization may be elegantly stated by means of constraints amongst features and their values .	S-1
BKG	Unfortunately , the expressivity of these formalisms can have undesirable consequences for their processing .	S-2
BKG	In naive implementations of unification grammar parsers , feature structures play the same role as nonterminals in standard context-free grammar parsers .	S-3
BKG	Potentially large feature structures are stored at intermediate steps in the computation , so that the space requirements of the algorithm are expensive .	S-4
BKG	Furthermore , the need to perform non-destructive unification means that a large proportion of the processing time is spent copying feature structures .	S-5
OTH	One approach to this problem is to refine parsing algorithms by developing techniques such as restrictions , structure-sharing , and lazy unification that reduce the amount of structure that is stored and hence the need for copying of features structures,,,,,,,,,.	S-6
CTR	While these techniques can yield significant improvements in performance , the generality of unification-based grammar formalisms means that there are still cases where expensive processing is unavoidable .	S-7
CTR	This approach does not address the fundamental issue of the tradeoff between the descriptive capacity of a formalism and its computational power .	S-8
AIM	In this paper we identify a set of constraints that can be placed on unification-based grammar formalisms in order to guarantee the existence of polynomial time parsing algorithms .	S-9
OWN	Our choice of constraints is motivated by showing how they generalize constraints inherent in Linear Indexed Grammar ( LIG ) .	S-10
TXT	We begin by describing how constraints inherent in LIG admit tractable processing algorithms and then consider how these constraints can be generalized to a formalism that manipulates trees rather than stacks .	S-11
OWN	The constraints that we identify for the tree-based system can be regarded equally well as constraints on unification-based grammar formalisms such as PATR.	S-12
OTH	An Indexed Grammar ( IG ) can be viewed as a cfg in which each nonterminal is associated with a stack of indices .	S-13
OTH	Productions specify not only how nonterminals can be rewritten but also how their associated stacks are modified .	S-14
OTH	LIG , which were first described by, are constrained such that stacks are passed from the mother to at most a single daughter .	S-15
OTH	For , the size of the domain of nonterminals and associated stacks ( the analogue of the nonterminals in cfg ) is not bound by the grammar .	S-16
OTH	However ,demonstrate that polynomial time performance can be achieved through the use of structure-sharing made possible by constraints in the way that LIG use stacks .	S-17
OTH	Although stacks of unbounded size can arise during a derivation , it is not possible for a to specify that two dependent , unbounded stacks must appear at distinct places in the derivation tree .	S-18
OTH	Structure-sharing can therefore be used effectively because checking the applicability of rules at each step in the derivation involves the comparison of structures of limited size .	S-19
AIM	Our goal is to generalize the constraints inherent in LIG , to a formalism that manipulates feature structures rather than stacks .	S-20
OWN	As a guiding heuristic we will avoid formalisms that generate tree sets with an unbounded number of unbounded , dependent branches .	S-21
OWN	It appears that the structure-sharing techniques used with LIG cannot be generalized in a straightforward way to such formalisms .	S-22
OWN	Suppose that we generalize LIG to allow the stack to be passed from the mother to two daughters .	S-23
OWN	If this is done recursion can be used to produce an unbounded number of unbounded , dependent branches .	S-24
OWN	An alternative is to allow an unbounded stack to be shared between two ( or more ) daughters but not with the mother .	S-25
OWN	Thus , rules may mention more than one unbounded stack , but the stack associated with the mother is still associated with at most one daughter .	S-26
OWN	We refer to this extension as Partially Linear Indexed Grammars ( PLIG ) .	S-27
OWN	In PLIG , stacks shared amongst siblings cannot be passed to the mother .	S-28
OWN	As a consequence , there is no possibility that recursion can be used to increase the number of dependent branches .	S-29
OWN	In fact , the number of dependent branches is bounded by the length of the right-hand-side of productions .	S-30
OWN	By the same token , however , PLIG may only generate structural descriptions in which dependent branches begin at nodes that are siblings of one another .	S-31
OWN	Note that the tree shown in Figureis unobtainable because the branch rooted atis dependent on more than one of the branches originating at its sibling.	S-32
OWN	This limitation can be overcome by moving to a formalism that manipulates trees rather than stacks .	S-33
OWN	We consider an extension of cfg in which each nonterminal A is associated with a tree.	S-34
OWN	Productions now specify how the tree associated with the mother is related to the trees associated with the daughters .	S-35
OWN	We denote trees with first order terms .	S-36
OWN	For example , the following production requires that the x and y subtrees of the mother 's tree are shared with the B and C daughters , respectively .	S-37
OWN	In addition , the daughters have in common the subtree z .	S-38
OWN	There is a need to incorporate some kind of generalized notion of linearity into such a system .	S-39
OWN	Corresponding to the linearity restriction in LIG we require that any part of the mother 's tree is passed to at most one daughter .	S-40
OWN	Corresponding to the partial linearity of PLIG , we permit subtrees that are not shared with the mother to be shared amongst the daughters .	S-41
OWN	Under these conditions , the tree set shown in Figurecan be generated .	S-42
OWN	The nodesandshare the tree, which occurs twice at the node.	S-43
OWN	Atthe two copies ofare distributed across the daughters .	S-44
OWN	The formalism as currently described can be used to simulate arbitrary Turing Machine computations .	S-45
OWN	To see this , note that an instantaneous description of a Turing Machine can be encoded with a tree as shown in Figure.	S-46
OWN	Moves of the Turing Machine can be simulated by unary productions .	S-47
OWN	The following production may be glossed : `` if in state q and scanning the symbol X , then change state to q ' , write the symbol Y and move left '' .	S-48
OWN	One solution to this problem is to prevent a single daughter sharing more than one of its subtrees with the mother .	S-49
OWN	However , we do not impose this restriction because it still leaves open the possibility of generating trees in which every branch has the same length , thus violating the condition that trees have at most a bounded number of unbounded , dependent branches .	S-50
OWN	Figureshows how a set of such trees can be generated by illustrating the effect of the following production .	S-51
OWN	To see this , assume ( by induction ) that all four of the daughter nonterminals are associated with the full binary tree of height i () .	S-52
OWN	All four of these trees are constrained to be equal by the production given above , which requires that they have identical left ( i.e. z ) subtrees ( these subtrees must be the full binary tree) .	S-53
OWN	Passing the right subtrees ( x , y , x ' and y ' ) to the mother as shown allows the construction of a full binary tree with height i + 1 () .	S-54
OWN	This can be repeated an unbounded number of times so that all full binary trees are produced .	S-55
OWN	To overcome both of these problems we impose the following additional constraint on the productions of a grammar .	S-56
OWN	We require that subtrees of the mother that are passed to daughters that share subtrees with one another must appear as siblings in the mother 's tree .	S-57
OWN	Note that this condition rules out the production responsible for building full binary trees since the x , y , x ' and y ' subtrees are not siblings in the mother 's tree despite the fact that all of the daughters share a common subtree z.	S-58
OWN	Moreover , since a daughter shares subtrees with itself , a special case of the condition is that subtrees occurring within some daughter can only appear as siblings in the mother .	S-59
OWN	This condition also rules out the Turing Machine simulation .	S-60
OWN	We refer to this formalism as Partially Linear Tree Grammars ( PLTG ) .	S-61
OWN	As a further illustration of the constraints places on shared subtrees , Figureshows a local tree that could appear in a derivation tree .	S-62
OWN	This local tree is licensed by the following production which respects all of the constraints on PLTG productions .	S-63
OWN	Note that in Figurethe daughter nodes labelled B and D share a common subtree and the subtrees shared between the mother and the B and D daughters appear as siblings in the tree associated with the mother .	S-64
OWN	Finally , we note that acyclic feature structures without re-entrancy can be viewed as trees with branches labelled by feature names and atomic values only found at leaf nodes ( interior nodes being unlabelled ) .	S-65
OWN	Based on this observation , we can consider the constraints we have formulated for the tree system PLTG as constraints on a unification-based grammar formalism such as PATR .	S-66
OWN	We will call this system Partially Linear PATR ( PLPATR ) .	S-67
OWN	Having made the move from trees to feature structures , we consider the possibility of re-entrancy in PLPATR .	S-68
OWN	Note that the feature structure at the root of a PLPATR derivation tree will not involve re-entrancy .	S-69
OWN	However , for the following reasons we believe that this does not constitute as great a limitation as it might appear .	S-70
OWN	In unification-based grammar , the feature structure associated with the root of the tree is often regarded as the structure that has been derived from the input ( i.e. , the output of a parser ) .	S-71
OWN	As a consequence there is a tendency to use the grammar rules to accumulate a single , large feature structure giving a complete encoding of the analysis .	S-72
OWN	To do this , unbounded feature information is passed up the tree in a way that violates the constraints developed in this paper .	S-73
OWN	Rather than giving such prominence to the root feature structure , we suggest that the entire derivation tree should be seen as the object that is derived from the input , i.e. , this is what the parser returns .	S-74
OWN	Because feature structures associated with all nodes in the tree are available , feature information need only be passed up the tree when it is required in order to establish dependencies within the derivation tree .	S-75
OWN	When this approach is taken , there may be less need for re-entrancy in the root feature structure .	S-76
OWN	Furthermore , re-entrancy in the form of shared feature structures within and across nodes will be found in PLPATR ( see for example Figure) .	S-77
CTR	LIG are more powerful than CFG and are known to be weakly equivalent to Tree Adjoining Grammar , Combinatory Categorial Grammar , and Head Grammar.	S-78
OWN	PLIG are more powerful than LIG since they can generate the k-copy language for any fixed k ( see Example) .	S-79
OWN	Slightly more generally , PLIG can generate the language	S-80
OWN	for anyand regular language R .	S-81
OWN	We believe that the language involving copies of strings of matching brackets described in Examplecannot be generated by PLIG but , as shown in Example, it can be generated by PLTG and therefore PLPATR .	S-82
OWN	Slightly more generally , PLTG can generate the language	S-83
OWN	for anyand context-free language L .	S-84
OWN	It appears that the class of languages generated by PLTG is included in those languages generated by Linear Context-Free Rewriting Systemssince the construction involved in a proof of this underlies the recognition algorithm discussed in the next section .	S-85
OWN	As is the case for the tree sets of IG , LIG and Tree Adjoining Grammar , the tree sets generated by PLTG have path sets that are context-free languages .	S-86
OWN	In other words , the set of all strings labelling root to frontier paths of derivation trees is a context-free language .	S-87
OWN	While the tree sets of LIG and Tree Adjoining Grammars have independent branches , PLTG tree sets exhibit dependent branches , where the number of dependent branches in any tree is bounded by the grammar .	S-88
OWN	Note that the number of dependent branches in the tree sets of IG is not bounded by the grammar ( e.g. , they generate sets of all full binary trees ) .	S-89
TXT	In this section we outline the main ideas underlying a polynomial time recognition algorithm for PLPATR that generalizes the CKY algorithm,.	S-90
BAS	The key to this algorithm is the use of structure sharing techniques similar to those used to process LIG efficiently.	S-91
TXT	To understand how these techniques are applied in the case of PLPATR , it is therefore helpful to consider first the somewhat simpler case of LIG .	S-92
OTH	The CKY algorithm is a bottom-up recognition algorithm for CFG .	S-93
OTH	For a given grammar G and input stringthe algorithm constructs an array P , havingelements , where elementstores all and only those nonterminals of G that derive the substring.	S-94
OTH	A naive adaptation of this algorithm for LIG recognition would involve storing a set of nonterminals and their associated stacks .	S-95
OTH	But since stack length is at least proportional to the length of the input string , the resultant algorithm would exhibit exponential space and time complexity in the worst case .	S-96
OTH	showed that the behaviour of the naive algorithm can be improved upon .	S-97
OTH	In LIG derivations the application of a rule cannot depend on more than a bounded portion of the top of the stack .	S-98
OTH	Thus , rather than storing the whole of the potentially unbounded stack in a particular array entry , it suffices to store just a bounded portion together with a pointer to the residue .	S-99
BKG	Consider Figure.	S-100
BKG	Treeshows a LIG derivation of the substringfrom the object.	S-101
BKG	In this derivation tree , the node labelledis a distinguished descendant of the root and is the first point belowat which the top symbol () of the ( unbounded ) stackis exposed .	S-102
BKG	This node is called the terminator of the node labelled.	S-103
BKG	It is not difficult to show that only that portion of the derivation below the terminator node is dependent on more than the top of the stack.	S-104
BKG	It follows that for any stack, if there is a derivation of the substringfrom( see tree) , then there is a corresponding derivation offrom( see tree) .	S-105
BKG	This captures the sense in which LIG derivations exhibit `` context-freeness '' .	S-106
OWN	Efficient storage of stacks can therefore be achieved by storing in P [ i , j ] just that bounded amount of information ( nonterminal plus top of stack ) relevant to rule application , together with a pointer to any entry inrepresenting a subderivation from an object.	S-107
OWN	Before describing how we adapt this technique to the case of PLPATR we discuss the sense in which PLPATR derivations exhibit a `` context-freeness '' property .	S-108
OWN	The constraints on PLPATR which we have identified in this paper ensure that these feature values can be manipulated independently of one another and that they behave in a stack-like way .	S-109
OWN	As a consequence , the storage technique used effectively for LIG recognition may be generalized to the case of PLPATR .	S-110
OWN	Suppose that we have the derived tree shown in Figurewhere the nodes at the root of the subtreesandare the so-called f-terminator and g-terminator of the tree 's root , respectively .	S-111
OWN	Roughly speaking , the f-terminator of a node is the node from which it gets the value for the feature f. Because of the constraints on the form of PLPATR productions , the derivations between the root ofand these terminators cannot in general depend on more than a bounded part of the feature structuresand.	S-112
OWN	At the root of the figure the feature structuresandhave been expanded to show the extent of the dependency in this example .	S-113
OWN	In this case , the value of the feature f inmust be a , whereas , the feature g is not fixed .	S-114
OWN	Furthermore , the value of the feature g inmust be b , whereas , the feature f is not fixed .	S-115
OWN	This means , for example , that the applicability of the productions used on the path from the root ofto the root ofdepends on the feature f inhaving the value a but does not depend on the value of the feature g in.	S-116
OWN	Note that in this tree the value of the feature g inis	S-117
OWN	and the value of the feature f inis	S-118
OWN	Suppose that , in addition to the tree shown in Figurethe grammar generates the pair of trees shown in Figure.	S-119
OWN	Notice that while the feature structures at the root ofandare not compatible withand, they do agree with respect to those parts that are fully expanded at's root node .	S-120
OWN	The `` context-freeness '' of PLPATR means that given the three trees shown in Figuresandthe tree shown in Figurewill also be generated by the grammar .	S-121
OWN	This gives us a means of efficiently storing the potentially unbounded feature structures associated with nodes in a derivation tree ( derived feature structures ) .	S-122
OWN	By analogy with the situation for , derived feature structures can be viewed as consisting of a bounded part ( relevant to rule application ) plus unbounded information about the values of features .	S-123
OWN	For each feature , we store in the recognition array a bounded amount of information about its value locally , together with a pointer to a further array element .	S-124
OWN	Entries in this element of the recognition array that are compatible ( i.e. unifiable ) with the bounded , local information correspond to different possible values for the feature .	S-125
OWN	For example , we can use a single entry in the recognition array to store the fact that all of the feature structures that can appear at the root of the trees in Figurederive the substring.	S-126
OWN	This entry would be underspecified , for example , the value of featurewould be specified to be any feature stored in the array entry for the substringwhose feature f had the value a .	S-127
OWN	However , this is not the end of the story .	S-128
OWN	In contrast to LIG , PLPATR licenses structure sharing on the right hand side of productions .	S-129
OWN	That is , partial linearity permits feature values to be shared between daughters where they are not also shared with the mother .	S-130
OWN	But in that case , it appears that checking the applicability of a production at some point in a derivation must entail the comparison of structures of unbounded size .	S-131
OWN	In fact , this is not so .	S-132
OWN	The PLPATR recognition algorithm employs a second array ( called the compatibility array ) , which encodes information about the compatibility of derived feature structures .	S-133
OWN	Tuples of compatible derived feature structures are stored in the compatibility array using exactly the same approach used to store feature structures in the main recognition array .	S-134
OWN	The presence of a tuple in the compatibility array ( the indices of which encode which input substrings are spanned ) indicates the existence of derivations of compatible feature structures .	S-135
OWN	Due to the `` context-freeness '' of PLPATR , new entries can be added to the compatibility array in a bottom-up manner based on existing entries without the need to reconstruct complete feature structures .	S-136
AIM	In considering ways of extending LIG , this paper has introduced the notion of partial linearity and shown how it can be manifested in the form of a constrained unification-based grammar formalism .	S-137
OWN	We have explored examples of the kinds of tree sets and string languages that this system can generate .	S-138
OWN	We have also briefly outlined the sense in which partial linearity gives rise to `` context-freeness '' in derivations and sketched how this can be exploited in order to obtain a tractable recognition algorithm .	S-139
