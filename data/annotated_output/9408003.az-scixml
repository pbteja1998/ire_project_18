BKG	A description is an entity that can be interpreted as true or false of an object , and using feature structures as descriptions accrues several computational benefits .	A-0
AIM	In this paper , I create an explicit interpretation of a typed feature structure used as a description , define the notion of a satisfiable feature structure , and create a simple and effective algorithm to decide if a feature structure is satisfiable .	A-1
BKG	Describing objects is one of several purposes for which linguists use feature structures .	S-0
BKG	A description is an entity that can be interpreted as true or false of an object .	S-1
BKG	For example , the conventional interpretation of the description ` it is black ' is true of a soot particle , but false of a snowflake .	S-2
BKG	Therefore , any use of a feature structure to describe an object demands that the feature structure can be interpreted as true or false of the object .	S-3
AIM	In this paper , I tailor the semantics ofto suit the typed feature structures of, and so create an explicit interpretation of a typed feature structure used as a description .	S-4
OWN	I then use this interpretation to define the notion of a satisfiable feature structure .	S-5
OWN	Though no feature structure algebra provides descriptions as expressive as those provided by a feature logic , using feature structures to describe objects profits from a large stock of available computational techniques to represent , test and process feature structures .	S-6
AIM	In this paper , I demonstrate the computational benefits of marrying a tractable syntax and an explicit semantics by creating a simple and effective algorithm to decide the satisfiability of a feature structure .	S-7
BAS	's Troll type resolution system implements both the semantics and an efficient refinement of the satisfiability algorithm I present here,,.	S-8
OWN	A signature provides the symbols from which to construct typed feature structures , and an interpretation gives those symbols meaning .	S-9
OWN	Definition 1 .	S-10
OWN	is a signature iff [is a sextuple,	S-11
OWN	is a set ,	S-12
OWN	is a partial order ,	S-13
OWN	Tthen =,	S-14
OWN	is a set ,	S-15
OWN	is a partial function from the Cartesian product ofandto, and	S-16
OWN	for each, eachand each, ifis defined andthenis defined , and	S-17
OWN	Henceforth , I tacitly work with a signature.	S-18
OWN	I call members ofstates , members oftypes ,subsumption , members ofspecies , members ofattributes , andappropriateness .	S-19
OWN	Definition 2 .	S-20
OWN	I is an interpretation iff [ I is a triple,	S-21
OWN	U is a set ,	S-22
OWN	S is a total function from U to	S-23
OWN	A is a total function fromto the set of partial functions from U to U ,	S-24
OWN	for eachand each, ifis defined thenis defined , and, and	S-25
OWN	for eachand each, ifis defined thenis defined .	S-26
OWN	Suppose that I is an interpretation.	S-27
OWN	I call each member of U an object in I .	S-28
OWN	Each type denotes a set of objects in I .	S-29
OWN	The denotations of the species partition U , and S assigns each object in I the unique species whose denotation contains the object : object u is in the denotation of speciesiff.	S-30
OWN	Subsumption encodes a relationship between the denotations of species and types : object u is in the denotation of typeiff.	S-31
OWN	So , ifthen the denotation of typecontains the denotation of type.	S-32
OWN	Each attribute denotes a partial function from the objects in I to the objects in I , and A assigns each attribute the partial function it denotes .	S-33
OWN	Appropriateness encodes a relationship between the denotations of species and attributes : ifis defined then the denotation of attributeacts upon each object in the denotation of speciesto yield an object in the denotation of type, but ifis undefined then the denotation of attributeacts upon no object in the denotation of species.	S-34
OWN	So , ifis defined then the denotation of attributeacts upon each object in the denotation of typeto yield an object in the denotation of type.	S-35
OWN	I call a finite sequence of attributes a path , and writefor the set of paths .	S-36
OWN	Definition 3 .	S-37
OWN	P is the path interpretation function under I iff [ I is an interpretation,	S-38
OWN	P is a total function fromto the set of partial functions from U to U , and	S-39
OWN	for each, [is the functional composition of	S-40
OWN	I writefor the path interpretation function under I .	S-41
OWN	Definition 4 .	S-42
OWN	F is a feature structure iff [ F is a quadruple,	S-43
OWN	Q is a finite subset of,	S-44
OWN	,	S-45
OWN	is a finite partial function from the Cartesian product of Q andto Q ,	S-46
OWN	is a total function from Q to, and	S-47
OWN	for each, [ for some,runs to q ' in F , ] ] whereruns to q ' in F iff [,	S-48
OWN	, and	S-49
OWN	for some, [,	S-50
OWN	for each i  <  n , [is defined , and, and	S-51
OWN	Each feature structure is a connectedmachinewith finitely many states , input alphabet, and output alphabet.	S-53
OWN	Definition 5 .	S-54
OWN	F is true of u under I iff [ F is a feature structure,	S-55
OWN	I is an interpretation,	S-56
OWN	u is an object in I , and	S-57
OWN	for each, eachand each, [ [ ifruns to q ' in F , andruns to q ' in F thenis defined ,is defined ,, and	S-58
OWN	Definition 6 .	S-59
OWN	F is a satisfiable feature structure iff [ F is a feature structure , and	S-60
OWN	for some interpretation I and some object u in I , F is true of u under I .	S-61
OWN	The abundance of interpretations seems to preclude an effective algorithm to decide if a feature structure is satisfiable .	S-62
OWN	However , I insert morphs between feature structures and objects to yield an interpretation free characterisation of a satisfiable feature structure .	S-63
OWN	Definition 7 .	S-64
OWN	M is a semi-morph iff [ M is a triple,	S-65
OWN	is a nonempty subset of,	S-66
OWN	is an equivalence relation over,	S-67
OWN	for each, eachand each, ifandthen,	S-68
OWN	is a total function fromto,	S-69
OWN	for eachand each, ifthen, and	S-70
OWN	for eachand each, ifthen,is defined , and	S-71
OWN	Definition 8 .	S-72
OWN	M is a morph iff [ M is a semi-morph, and	S-73
OWN	for eachand each, [ [ ifandis defined then	S-74
OWN	Each morph is theabstractionof a connected and totally well-typedmachine with possibly infinitely many states , input alphabet, and output alphabet.	S-75
OWN	Definition 9 .	S-76
OWN	M abstracts u under I iff [ M is a morph,	S-77
OWN	I is an interpretation,	S-78
OWN	u is an object in I ,	S-79
OWN	for eachand each,iffis defined ,is defined , and, and	S-80
OWN	for eachand each,iffis defined , and.	S-81
OWN	Proposition 10 .	S-82
OWN	For each interpretation I and each object u in I , [ some unique morph abstracts u under I. ] ] I thus write of the abstraction of u under I .	S-83
OWN	Definition 11 .	S-84
OWN	u is a standard object iff [ u is a quadruple,	S-85
OWN	is a morph , and	S-86
OWN	is an equivalence class under.	S-87
OWN	I writefor the set of standard objects , writefor the total function fromto, where [ for eachand each,iff for some,, and writefor the total function fromto the set of partial functions fromto, where [ for each, eachand each,is defined , andiff, and for some,.	S-88
OWN	Lemma 12 .	S-89
OWN	is an interpretation .	S-90
OWN	I writefor.	S-91
OWN	Lemma 13 .	S-92
OWN	For each, eachand each,is defined , andiff, and for some,.	S-93
OWN	Proof .	S-94
OWN	By induction on the length of.	S-95
OWN	Lemma 14 .	S-96
OWN	For each, ifis the equivalence class of the empty path underthen the abstraction ofunderis	S-97
OWN	Proposition 15 .	S-98
OWN	For each morph M , [ for some interpretation I and some object u in I , [ M is the abstraction of u under I .	S-99
OWN	Definition 16 .	S-100
OWN	F approximates M iff F is a feature structure,	S-101
OWN	M is a morph, and	S-102
OWN	for each, eachand each, ifruns to q ' in F , andruns to q ' in F then, and	S-103
OWN	A feature structure approximates a morph iff the Moshier abstraction of the feature structure abstractly subsumesthe morph .	S-104
OWN	Proposition 17	S-105
OWN	For each interpretation I , each object u in I and each feature structure F , F is true of u under I iff F approximates the abstraction of u under I .	S-106
OWN	Theorem 18 .	S-107
OWN	For each feature structure F , [ F is satisfiable iff F approximates some morph .	S-108
OWN	Proof .	S-109
OWN	From propositionsand.	S-110
OWN	Though theoremgives an interpretation free characterisation of a satisfiable feature structure , the characterisation still seems to admit of no effective algorithm to decide if a feature structure is satisfiable .	S-111
OWN	However , I use theoremand resolved feature structures to yield a less general interpretation free characterisation of a satisfiable feature structure that admits of such an algorithm .	S-112
OWN	Definition 19 .	S-113
OWN	R is a resolved feature structure iff [ R is a feature structure,	S-114
OWN	is a total function from Q to, and	S-115
OWN	for eachand each, [ ifis defined thenis defined , and	S-116
OWN	Each resolved feature structure is a well-typedfeature structure with output alphabet.	S-117
OWN	Definition 20 .	S-118
OWN	R is a resolvant of F iff [ R is a resolved feature structure,	S-119
OWN	F is a feature structure, and	S-120
OWN	for each,	S-121
OWN	Proposition 21 .	S-122
OWN	For each interpretation I , each object u in I and each feature structure F , [ F is true of u under I iff some resolvant of F is true of u under I .	S-123
OWN	Definition 22 .	S-124
OWN	is rational iff for eachand each, [ [ ifis defined then for some,.	S-125
OWN	Proposition 23 .	S-126
OWN	Ifis rational then for each resolved feature structure R , R is satisfiable .	S-127
OWN	PROOF .	S-128
OWN	Suppose thatandis a bijection from ordinalto.	S-129
OWN	Let	S-130
OWN	For each,is a semi-morph .	S-131
OWN	Let,	S-132
OWN	, and	S-133
OWN	is a morph that R approximates .	S-134
OWN	By theorem, R is satisfiable .	S-135
OWN	Theorem 24 .	S-136
OWN	Ifis rational then for each feature structure F , F is satisfiable iff F has a resolvant .	S-137
OWN	Proof .	S-138
OWN	From propositionsand	S-139
TXT	In this section , I use theoremto show how - given a rational signature that meets reasonable computational conditions - to construct an effective algorithm to decide if a feature structure is satisfiable .	S-140
OWN	Definition 25 .	S-141
OWN	is computable iff [,andare countable ,	S-142
OWN	is finite ,	S-143
OWN	for some effective function, [ for eachand each, [ ifthen` true ' otherwise` false ' , and	S-144
OWN	for some effective function, [ for eachand each, [ ifis defined thenotherwise` undefined '	S-145
OWN	Proposition 26 .	S-146
OWN	Ifis computable then for some effective function, for each feature structure F , [a list of the resolvants of F .	S-147
OWN	Proof .	S-148
OWN	Sinceis computable , for some effective function, for each finite,a list of the total functions from Q to, for some effective function, for each finite set Q , each finite partial functionfrom the Cartesian product of Q andto Q , and each total functionfrom Q to, if for eachin the domain of,is defined , andthen` true ' otherwise` false ' , and for some effective function, for each finite set Q , each total functionfrom Q toand each total functionfrom Q to, if for each,then` true ' otherwise` false ' .	S-149
OWN	Constructas follows :	S-150
OWN	for each feature structure, setand.	S-151
OWN	whileis not empty .	S-152
OWN	do = set.	S-153
OWN	if` true ' ,` true ' , andthen set.	S-154
OWN	ifthen output.	S-155
OWN	is an effective algorithm , and for each feature structure F ,a list of the resolvants of F .	S-156
OWN	Theorem 27 .	S-157
OWN	Ifis rational and computable then for some effective function, for each feature structure F , if F is satisfiable then` true otherwise` false ' .	S-158
OWN	Proof .	S-159
OWN	From theoremand proposition.	S-160
OTH	's Troll system,,employs an efficient refinement ofto test the satisfiability of feature structures .	S-161
OTH	In fact , Troll represents each feature structure as a disjunction of the resolvants of the feature structure .	S-162
OTH	Loosely speaking , the resolvants of a feature structure have the same underlying finite state automaton as the feature structure , and differ only in their output function .	S-163
OTH	Troll exploits this property to represent each feature structure as a finite state automaton and a set of output functions .	S-164
OTH	The Troll unifier is closed on these representations .	S-165
OTH	Thus , thoughis computationally expensive , Troll usesonly during compilation , never during run time .	S-166
