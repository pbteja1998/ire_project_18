AIM	We propose a paradigm for concurrent natural language generation .	A-0
BAS	In order to represent grammar rules distributively , we adopt categorial unification grammar ( CUG ) where each category owns its functional type .	A-1
AIM	We augment typed lambda calculus with several new combinators , to make the order of- conversions free for partial / local processing .	A-2
BAS	The concurrent calculus is modeled with Chemical Abstract Machine .	A-3
OWN	We show an example of a Japanese causative auxiliary verb that requires a drastic rearrangement of case domination .	A-4
BKG	Parallel and distributed computation is expected to be the main stream of information processing .	S-0
BKG	In the conventional generation , the rules for composition are given from the outside and those rules control all the behavior of the symbols or the objects , for assembling a hierarchical tree structure .	S-1
BKG	For example , all the linguistic objects , such as words and phrases must be applied to so-called grammar rules to form grammatical structures or rational semantic representations , under a strict controller process .	S-2
BKG	However , this kind of formalization obviously contradicts the partial / distributed processing that would be required in parallel architecture in future .	S-3
BAS	In order to represent grammar rules distributively , we adopt categorial grammar , where we can an attach local grammar rule to each word and phrase .	S-4
AIM	What we aim in this paper is to propose a paradigm that enables partial / local generation through decompositions and reorganizations of tentative local structures .	S-5
TXT	In the following section , we introduce the extended- calculus .	S-6
TXT	Thereafter we introduce the ChAM model and we reinterpret the model in terms of natural language processings .	S-7
TXT	Then we show the model of membrane interaction model with the example of Japanese causative sentence that requires drastic change of domination of cases .	S-8
TXT	Finally we will discuss the future of the model .	S-9
BAS	CUG ( Categorial Unification Grammar )is advantageous , compared to other phrase structure grammars , for parallel architecture , because we can regard categories as functional types and we can represent grammar rules locally .	S-10
OWN	This means that we do not need externally-given grammar rules but those rules reside within each word or each phrase .	S-11
OWN	In this section , we regard categories as polymorphic types and consider the type calculus .	S-12
OWN	In later sections we denote categories by DAG ( directed acyclic graph ) of PATR grammar.	S-13
OWN	We use greek letters , for type schemas .	S-14
OWN	For type constants we usewhile for type variables we use.	S-15
OWN	represents that the object a is of type.	S-16
OWN	Ifandare types , thenis a type .	S-17
OWN	The purpose of type inference is to infer the type of an object from a set of objects whose types are known .	S-18
OWN	We presuppose that two type variablesandare unified with a unifier.	S-19
OWN	We usefor this set of type-known objects .	S-20
OWN	The most important two rules are as follows :	S-21
OWN	The rulecorresponds to- conversion of the ordinary- calculus.	S-22
BAS	In this subsection , we introduce two combinators that enable us to change the order of- conversion , proposed by, as a kind of type change.	S-23
OTH	The ordinary- calculus requires a strict order of conversion .	S-24
CTR	However , in a concurrent model , this kind of strict order is a hindrance and contingent conversions are required .	S-25
OWN	C-combinator changes the order of- variables as follows :	S-26
OWN	Another requirement for exchanges of the order of- conversion is the following case .	S-27
OWN	Suppose that we are required to compose all the following typed objects :	S-28
OWN	In such a case , we need to concatenate g and a first , and then g(a) becomes applicable to f .	S-29
OWN	However , with the help of the following B-combinator :	S-30
OWN	The- variable in g can be shifted beyond the scope of f so that we can concatenate f and g first , and , thus , have a become applicable as in Fig..	S-31
OWN	The repeated use of C - and B-combinators is still problematic if we consider implementing it as an actual system because the termination of processing is not guaranteed .	S-32
OWN	We have modeled the process of a partial decomposition as an abstraction of an argument of the first-order term .	S-33
OWN	If this abstraction occurs randomly , the process easily falls into a loop .	S-34
OWN	In order to avoid this , we assume the unification cost .	S-35
OWN	If a compound term ( a subtree ) were to be decomposed once , the element with the longer distance should be abstracted first .	S-36
OWN	We can regard the whole sentence structure as more grammatical if the sum of these unification costs is smaller .	S-37
OWN	We introduce the heuristic costs, considering the parallelism between syntactic cases and semantic roles , as follows :	S-38
OWN	whererepresents a unifier of two DAG 's : one 's syntactic case is x and the other 's semantic role is y .	S-39
OWN	k is some constant larger than 1 ( k  >  1 ) .	S-40
OTH	Chemical Abstract Machine ( ChAM , for short )is a paradigm of concurrent- calculus .	S-41
BAS	In this paper , we will mention our principles on natural language processing with regard to the ChAM model .	S-42
OWN	We assume the process of natural language recognition as follows .	S-43
OWN	Whenever a linguistic object is recognized , it is thrown into the solution of ChAM , and acts as a molecule .	S-44
OWN	Verbs and some other auxiliary verbs introduces membranes .	S-45
OWN	These membranes becomes their scopes for case ( or role ) domination ; namely , each verb searches for molecules ( noun phrases ) that are necessary to satisfy each verb 's case ( role ) frame , within its membrane .	S-46
OWN	In some occasions , if multiple verbs exist in one sentence , they may conflict as to which verb dominates which noun phrase .	S-47
OWN	In such a case , two membranes can interact and can exchange some molecules .	S-48
OWN	We usefor membranes .	S-49
OWN	When a membranecontains a molecule, we denote asThe supporting relation () can be interpreted as an inclusion relation () in this case .	S-50
OWN	Two membranes can interact when they contact with the notation `' , as.	S-51
OWN	If there is a floating molecule ( that which is not yet concatenated with other molecules ) on one side , it can move through the porous membranes .	S-52
OWN	Valences for concatenation of each molecule are represented by typed lambda-variables .	S-53
OWN	If one membrane contains only one composite structure , and it still has surplus valences , we can regard that whole the membrane has those surplus valences as follows .	S-54
OWN	Now , we will apply our notions above to the actual problem of sentence generation .	S-55
BKG	In the Japanese language , the causative and the change of voice are realized by agglutinations of those auxiliary verbs at the tail of current verbs .	S-56
BKG	These auxiliary verbs as well as ordinary verbs can dominate some cases so that these agglutinations may change the whole syntax.	S-57
BKG	Namely the scope of the operation of these auxiliary verbs is not the operated verb but the whole sentence .	S-58
BKG	In order to illustrate these role changes , we show the alternation of the agent of the main verb in Tablewith a short tip to Japanese lexicon .	S-59
BKG	As an example , we will take the sentence :	S-60
OWN	First , we give DAG 's for each lexical items in Fig.	S-61
OWN	The last DAG in Fig.represents that the verb ` yomu ( read ) ' requires two roles ` the reader ' and ` the object to be read ' , and one optional role ` the counter-agent ' who hears what the reader reads .	S-62
OWN	In that figure , `' means that each word is recognized in the general world however a verb ` yomu ' introduced a special membraneas a subworld of W. Each DAG means a polymorphic type of the lexical item .	S-63
OWN	Assume that there is a parser that constructs partial tree structures , as recognizing each word from the head sequentially .	S-64
OWN	Then , when the first four words are recognized , they can form a complete sentence of.	S-65
OWN	Because all the three nouns are adequately concatenated by ` read ' , a sentential representation is made in the subworld of.	S-66
OWN	In,'s are the records of unification , that contain the costs and the original types ; they become necessary when they are backtracked , and in that meaning , those bindings are transitive .	S-67
OWN	Now , let us recapitulate what has occurred in the membrane.	S-68
OWN	There were four lexical items in the set , and they are duly organized to a sentence andbecomes a singleton .	S-69
OWN	Then , the problematic final word ` - aseru ( causative ) ' arrives ; its DAG representation is as in Fig..	S-70
OWN	The DAG in Fig.requires a sentential form ( category S ) as an argument , and in addition , it subcategorizes an item of category N as an agent of the subsentence .	S-71
OWN	Now , the process becomes as in Fig..	S-72
OWN	All through the process in Fig., C - and B-combinators are used repeatedly as well as ordinary type inferenceand.	S-73
OWN	The second membranerequires an agent role ( the variable x ' of make ) .	S-74
OWN	There is a record inthat it bit agent , so that the comparison should be made betweenand.	S-75
OWN	However , because both ofandunifies nominative case and agent role , the costs are equivalent .	S-76
OWN	In such a case , linguistic heuristics will solve the problem .	S-77
OWN	In this case , the agent of make should be the nominative of the whole sentence , and the co-agent of make is the dative of the whole sentence , so that K and N are bit by newly arrived make .	S-78
OWN	B remains bound to read , because there is no- variable of that type in make .	S-79
OWN	The process is depicted in fig..	S-80
AIM	Introducing free-ordered typed- calculus , together with the notion of unification costs in types , we have shown the structuring of natural language syntax , by distributively represented types in random orders .	S-81
BAS	We adopted a model of Chemical Abstract Machine for the partial / concurrent computation model .	S-82
OWN	Although we introduced the concept of costs and termination was assured , the efficiency of constructing a parsing tree would be far slower than sequential processing .	S-83
AIM	However our objective is not to propose a faster algorithm , but is to show the possibility of distributed processing of natural languages .	S-84
OWN	We could show that natural language syntax is self-organizable , in that each linguistic objects do not need to be poured into ` molds ' , viz. , externally given grammar .	S-85
