AIM	We present LHIP , a system for incremental grammar development using an extended DCG formalism .	A-0
OWN	The system uses a robust island-based parsing method controlled by user-defined performance thresholds .	A-1
AIM	This paper describes LHIP ( Left-Head corner Island Parser ) , a parser designed for broad-coverage handling of unrestricted text .	S-0
AIM	The system interprets an extended DCG formalism to produce a robust analyser that finds parses of the input made from ` islands ' of terminals ( corresponding to terminals consumed by successful grammar rules ) .	S-1
OWN	It is currently in use for processing dialogue transcripts from the HCRC Map Task Corpus, although we expect its eventual applications to be much wider .	S-2
BKG	Transcribed natural speech contains a number of frequent characteristic ` ungrammatical ' phenomena : filled pauses , repetitions , restarts , etc. ( as in e.g.	S-3
BKG	While a full analysis of a conversation might well take these into account , for many purposes they represent a significant obstacle to analysis .	S-4
OWN	LHIP provides a processing method which allows selected portions of the input to be ignored or handled differently .	S-5
CTR	The chief modifications to the standard Prolog ` grammar rule ' format are of two types : one or more right-hand side ( RHS ) items may be marked as ` heads ' , and one or more RHS items may be marked as ` ignorable ' .	S-6
TXT	We expand on these points and introduce other differences below .	S-7
OWN	The behaviour of LHIP can best be understood in terms of the notions of island , span , cover and threshold :	S-8
OWN	Island :	S-9
OWN	Within an input string consisting of the terminals, an island is a subsequence, whose length is m + 1 .	S-10
OWN	Span :	S-11
OWN	The span of a grammar rule R is the length of the longest islandsuch that terminalsandare both consumed ( directly or indirectly ) by R .	S-12
OWN	Cover :	S-13
OWN	A rule R is said to cover m items if m terminals are consumed within the island described by R .	S-14
OWN	The coverage of R is then m .	S-15
OWN	Threshold :	S-16
OWN	The threshold of a rule is the minimum value for the ratio of its coverage c to its span s which must hold in order for the rule to succeed .	S-17
OWN	Note that, and that if c = s the rule has completely covered the span , consuming all terminals .	S-18
OWN	As implied here , rules need not cover all of the input in order to succeed .	S-19
OWN	More specifically , the constraints applied in creating islands are such that islands do not have to be adjacent , but may be separated by non-covered input .	S-20
OWN	Moreover , an island may itself contain input which is unaccounted for by the grammar .	S-21
OWN	Islands do not overlap , although when multiple analyses exist they will in general involve different segmentations of the input into islands .	S-22
OWN	There are two notions of non-coverage of the input : sanctioned and unsanctioned non-coverage .	S-23
OWN	The latter case arises when the grammar simply does not account for some terminal .	S-24
OWN	Sanctioned non-coverage means that some number of special ` ignore ' rules have been applied which simulate coverage of input material lying between the islands , thus in effect making the islands contiguous .	S-25
OWN	Those parts of the input that have been ` ignored ' are considered to have been consumed .	S-26
OWN	These ignore rules can be invoked individually or as a class .	S-27
OWN	It is this latter capability which distinguishes ignore rules from regular rules , as they are functionally equivalent otherwise , mainly serving as a notational aid for the grammar writer .	S-28
OWN	Strict adjacency between RHS clauses can be specified in the grammar .	S-29
OWN	It is possible to define global and local thresholds for the proportion of the spanned input that must be covered by rules ; in this way , the user of an LHIP grammar can exercise quite fine control over the required accuracy and completeness of the analysis .	S-30
OWN	A chart is kept of successes and failures of rules , both to improve efficiency and to provide a means of identifying unattached constituents .	S-31
OWN	In addition , feedback is given to the grammar writer on the degree to which the grammar is able to cope with the given input ; in a context of grammar development , this may serve as notification of areas to which the coverage of the grammar might next be extended .	S-32
OWN	The notion of ` head ' employed here is connected more closely with processing control than linguistics .	S-33
OWN	In particular , nothing requires that a head of a rule should share any information with the LHS item , although in practice it often will .	S-34
OWN	Heads serve as anchor-points in the input string around which islands may be formed , and are accordingly treated before non-head items ( RHS items are re-ordered during compilation-see below ) .	S-35
CTR	In the central role of heads , LHIP resembles parsers devised byand; in other respects , including the use which is made of heads , the approaches are rather different , however .	S-36
TXT	In this section we describe the LHIP system .	S-37
OWN	First , we define what constitutes an acceptable LHIP grammar , second , we describe the process of converting such a grammar into Prolog code , and third , we describe the analysis of input with such a grammar .	S-38
OWN	LHIP grammars are an extended form of Prolog DCG grammars .	S-39
OWN	The extensions can be summarized as follows :	S-40
OWN	one or more RHS clauses may be nominated as heads ;	S-41
OWN	one or more RHS clauses may be marked as optional ;	S-42
OWN	` ignore ' rules may be invoked ;	S-43
OWN	adjacency constraints may be imposed between RHS clauses ;	S-44
OWN	a global threshold level may be set to determine the minimum fraction of spanned input that may be covered in a parse , and	S-45
OWN	a local threshold level may be set in a rule to override the global threshold within that rule .	S-46
OWN	We provide a syntactic definition ( below ) of a LHIP grammar rule , using a notation with syntactic rules of the formwhich indicates that the category C may take any of the formsto.	S-47
OWN	An optional item in a form is denoted by surrounding it with square brackets ` [ ... ] ' .	S-48
OWN	Syntactic categories are italicised , while terminals are underlined : `' .	S-49
OWN	A LHIP grammar rule has the form :	S-50
OWN	where T is a value between zero and one .	S-51
OWN	If present , this value defines the local threshold fraction for that rule .	S-52
OWN	This local threshold value overrules the global threshold .	S-53
OWN	The symbol `' before the name of a rule marks it as being an ` ignore ' rule .	S-54
OWN	Only a rule defined this way can be invoked as an ignore rule in an RHS clause .	S-55
OWN	The connectives ` , ' and ` ; ' have the same precedence as in Prolog , while ` : ' has the same precedence as ` , ' .	S-56
OWN	Parentheses may be used to resolve ambiguities .	S-57
OWN	The connective ` , ' is used to indicate that strings subsumed by two RHS clauses are ordered but not necessarily adjacent in the input .	S-58
OWN	Thus ` A , B ' indicates that A precedes B in the input , perhaps with some intervening material .	S-59
OWN	The stronger constraint of immediate precedence is marked by ` : ' ; ` A : B ' indicates that the span of A precedes that of B , and that there is no uncovered input between the two .	S-60
OWN	Disjunction is expressed by ` ; ' , and optional RHS clauses are surrounded by ` ( ?.? ) ' .	S-61
OWN	The symbol ` * ' is used to indicate a head clause .	S-62
OWN	A rule name is a Prolog term , and only rules and terminal items may act as heads within a rule body .	S-63
OWN	The symbol ` @ ' introduces a terminal string .	S-64
OWN	As previously said , the purpose of ignore rules is simply to consume input terminals , and their intended use is in facilitating repairs in analysing input that contains the false starts , restarts , filled pauses , etc .	S-65
OWN	mentioned above .	S-66
OWN	These rules are referred to individually by preceding their name by the `' symbol .	S-67
OWN	They can also be referred to as a class in a rule body by the special RHS clause `' .	S-68
OWN	If used in a rule body , they indicate that input is potentially ignored-the problems that ignore rules are intended to repair will not always occur , in which case the rules succeed without consuming any input .	S-69
OWN	There is a semantic restriction on the body of a rule which is that it must contain at least one clause which necessarily covers input ( optional clauses and ignore rules do not necessarily cover input ) .	S-70
OWN	The following is an example of a LHIP rule .	S-71
OWN	Here , the sub-rule ` conjunction ( Conj ) ' is marked as a head and is therefore evaluated before either of ` s ( Sl ) ' or ` s ( Sr ) ' :	S-72
OWN	How is such a rule converted into Prolog code by the LHIP system ?	S-73
OWN	First , the rule is read and the RHS clauses are partitioned into those marked as heads , and those not .	S-74
OWN	A record is kept of their original ordering , and this record allows each clause to be constrained with respect to the clause that precedes it , as well as with respect to the next head clause which follows it .	S-75
OWN	Additional code is added to maintain a chart of known successes and failures of each rule .	S-76
OWN	Each rule name is turned into the name of a Prolog clause , and additional arguments are added to it .	S-77
OWN	These arguments are used for the input , the start and end points of the area of the input in which the rule may succeed , the start and end points of the actual part of the input over which it in fact succeeds , the number of terminal items covered within that island , a reference to the point in the chart where the result is stored , and a list of pointers to sub-results .	S-78
OWN	The converted form of the above rule is given below ( minus the code for chart maintenance ) :	S-79
OWN	The important points to note about this converted form are the following :	S-80
OWN	the conjunction clause is searched for before either of the two s clauses ;	S-81
OWN	the region of the input to be searched for the conjunction clause is the same as that for the rule 's LHS ( B-C ) : its island extends from O to P and covers Q items ;	S-82
OWN	the search region for the first s clause is B-O ( i.e. from the start of the LHS search region to the start of the conjunction island ) , its island starts at D and covers T items ;	S-83
OWN	the search region for the second s clause is P-C ( i.e. from the end of the conjunction island to the end of the LHS search region ) , its island ends at E and covers U items ;	S-84
OWN	the island associated with the rule as a whole extends from D to E and covers F items , where F is U + Q + T ;	S-85
OWN	lhip_threshold_value/1 unifies its argument M with the current global threshold value .	S-86
OWN	In the current implementation of LHIP , compiled rules are interpreted depth-first and left-to-right by the standard Prolog theorem-prover , giving an analyser that proceeds in a top-down , ` left-head-corner ' fashion .	S-87
OWN	Because of the reordering carried out during compilation , the situation regarding left-recursion is slightly more subtle than in a conventional DCG .	S-88
OWN	The ` s ( conjunct ( ... ) ) ' rule shown above is a case in point .	S-89
OWN	While at first sight it appears left-recursive , inspection of its converted form shows its true leftmost subrule to be ` conjunction ' .	S-90
OWN	Naturally , compilation may induce left-recursion as well as eliminating it , in which case LHIP will suffer from the same termination problems as an ordinary DCG formalism interpreted in this way .	S-91
OWN	And as with an ordinary DCG formalism , it is possible to apply different parsing methods to LHIP in order to circumvent these problems.	S-92
OWN	A related issue concerns the interpretation of embedded Prolog code .	S-93
OWN	Reordering of RHS clauses will result in code which precedes a head within a LHIP rule being evaluated after it ; judicious freezing of goals and avoidance of unsafe cuts are therefore required .	S-94
OWN	LHIP provides a number of ways of applying a grammar to input .	S-95
OWN	The simplest allows one to enumerate the possible analyses of the input with the grammar .	S-96
OWN	The order in which the results are produced will reflect the lexical ordering of the rules as they are converted by LHIP .	S-97
OWN	With the threshold level set to 0 , all analyses possible with the grammar by deletion of input terminals can be generated .	S-98
OWN	Thus , supposing a suitable grammar , for the sentence John saw Mary and Mark saw them there would be analyses corresponding to the sentence itself , as well as John saw Mary , John saw Mark , John saw them , Mary saw them , Mary and Mark saw them , etc .	S-99
OWN	By setting the threshold to 1 , only those partial analyses that have no unaccounted for terminals within their spans can succeed .	S-100
OWN	Hence , Mark saw them would receive a valid analysis , as would Mary and Mark saw them , provided that the grammar contains a rule for conjoined NPs ; John saw them , on the other hand , would not .	S-101
OWN	As this example illustrates , a partial analysis of this kind may not in fact correspond to a true sub-parse of the input ( since Mary and Mark was not a conjoined subject in the original ) .	S-102
OWN	Some care must therefore be taken in interpreting results .	S-103
OWN	A number of built-in predicates are provided which allow the user to constrain the behaviour of the parser in various ways , based on the notions of coverage , span and threshold :	S-104
OWN	lhip_phrase(+C,+S)	S-105
OWN	Succeeds if the input S can be parsed as an instance of category C .	S-106
OWN	lhip_cv_phrase(+C,+S)	S-107
OWN	As for lhip_phrase / 2 , except that all of the input must be covered .	S-108
OWN	lhip_phrase(+C,+S,-B,-E,-Cov)	S-109
OWN	As for lhip_phrase / 2 , except that B binds to the beginning of the island described by this application of C , E binds to the position immediately following the end , and Cov binds to the number of terminals covered .	S-110
OWN	lhip_mc_phrases(+C,+S,-Cov,-Ps)	S-111
OWN	The maximal coverage of S by C is Cov. Ps is the set of parses of S by C with coverage Cov .	S-112
OWN	lhip_minmax_phrases(+C,+S,-Cov,-Ps)	S-113
OWN	As for lhip_mc_phrases / 4 , except that Ps is additionally the set of parses with the least span .	S-114
OWN	lhip_seq_phrase(+C,+S,-Seq)	S-115
OWN	Succeeds if Seq is a sequence of one or more parses of S by C such that they are non-overlapping and each consumes input that precedes that consumed by the next .	S-116
OWN	lhip_maxT_phrases(+C,+S,-MaxT)	S-117
OWN	MaxT is the set of parses of S by C that have the highest threshold value .	S-118
OWN	On backtracking it returns the set with the next highest threshold value .	S-119
OWN	In addition , other predicates can be used to search the chart for constituents that have been identified but have not been attached to the parse tree .	S-120
OWN	These include :	S-121
OWN	lhip_success	S-122
OWN	Lists successful rules , indicating island position and coverage .	S-123
OWN	lhip_ms_success	S-124
OWN	As for lhip_success , but lists only the most specific successful rules ( i.e. those which have themselves succeeded but whose results have not been used elsewhere ) .	S-125
OWN	lhip_ms_success(N )	S-126
OWN	As for lhip_ms_success , but lists only successful instances of rule N .	S-127
OWN	Even if a sentence receives no complete analysis , it is likely to contain some parsable substrings ; results from these are recorded together with their position within the input .	S-128
OWN	By using these predicates , partial but possibly useful information can be extracted from a sentence despite a global failure to parse it ( see section) .	S-129
OWN	The conversion of the grammar into Prolog code means that the user of the system can easily develop analysis tools that apply different constraints , using the tools provided as building blocks .	S-130
OWN	As previously mentioned , LHIP facilitates a cyclic approach to grammar development .	S-131
OWN	Suppose one is writing an English grammar for the Map Task Corpus , and that the following is the first attempt at a rule for noun phrases ( with appropriate rules for determiners and nouns ) :	S-132
OWN	While this rule will adequately analyse simple NPs such as your map , or a missionary camp , on a NP such as the bottom right-hand corner it will give analyses for the bottom , the right-hand and the corner .	S-133
OWN	Worse still , in a long sentence it will join determiners from the start of the sentence to nouns that occur in the latter half of the sentence .	S-134
OWN	The number of superfluous analyses can be reduced by imposing a local threshold level , of say 0.5 .	S-135
OWN	By looking at the various analyses of sentences in the corpus , one can see that this rule gives the skeleton for noun phrases , but from the fraction of coverage of these parses one can also see that it leaves out an important feature , adjectives , which are optionally found in noun phrases .	S-136
OWN	With this rule , one can now handle such phrases as the left-hand bottom corner , and a banana tree .	S-137
OWN	Suppose further that this rule is now applied to the corpus , and then the rule is applied again but with a local threshold level of 1 .	S-138
OWN	By looking at items parsed in the first case but not in the second , one can identify features of noun phrases found in the corpus that are not covered by the current rules .	S-139
OWN	This might include , for instance , phrases of the form a slightly dipping line .	S-140
OWN	One can then go back to the grammar and see that the noun phrase rule needs to be changed to account for certain types of modifier including adjectives and adverbial modifiers .	S-141
OWN	It is also possible to set local thresholds dynamically , by making use of the ` { prolog code } ' facility :	S-142
OWN	In this way , the strictness of a rule may be varied according to information originating either within the particular run-time invocation of the rule , or elsewhere in the current parse .	S-143
OWN	For example , it would be possible , by providing a suitable definition for set_dynamic_threshold / 2 , to set T to 0.5 when more than one optional adjective has been found , and 0.9 otherwise .	S-144
OWN	Once a given rule or set of rules is stable , and the writer is satisfied with the performance of that part of the grammar , a local threshold value of 1 may be assigned so that superfluous parses will not interfere with work elsewhere .	S-145
OWN	The use of the chart to store known results and failures allows the user to develop hybrid parsing techniques , rather than relying on the default depth-first top-down strategy given by analysing with respect to the top-most category .	S-146
OWN	For instance , it is possible to analyse the input in ` layers ' of linguistic categories , perhaps starting by analysing noun-phrases , then prepositions , verbs , relative clauses , clauses , conjuncts , and finally complete sentences .	S-147
OWN	Such a strategy allows the user to perform processing of results between these layers , which can be useful in trying to find the ` best ' analyses first .	S-148
OWN	The discussion of built-in predicates mentioned facilities for recovering partial parses .	S-149
TXT	Here we illustrate this process , and indicate what further use might be made of the information thus obtained .	S-150
OWN	In the following example , the chart is inspected to reveal what constituents have been built during a failed parse of the truncated sentence	S-151
OWN	Each rule is listed with its identifier ( ` -1 ' for lexical rules ) , the island which it has analysed with beginning and ending positions , its coverage , and the representation that was constructed for it .	S-152
OWN	From this output it can be seen that the grammar manages reasonably well with noun phrases , but is unable to deal with questions ( the initial auxiliary have remains unattached ) .	S-153
OWN	Users will often be more interested in the successful application of rules which represent maximal constituents .	S-154
OWN	These are displayed by lhip_ms_success :	S-155
OWN	Here , two unattached lexical items have been identified , together with two instances of rule 4 , which combines a NP with a postmodifying PP .	S-156
OWN	The first of these has analysed the island you the tree by the brook , ignoring the tree , while the second has analysed the tree by the brook , consuming all terminals .	S-157
OWN	There is a second analysis for the tree by the brook , due to rule 5 , which has been obtained by ignoring the sequence tree by the .	S-158
OWN	From this information , a user might wish to rank the three results according to their respective span : coverage ratios , probably preferring the second .	S-159
BKG	The ability to deal with large amounts of possibly ill-formed text is one of the principal objectives of current NLP research .	S-160
OTH	Recent proposals include the use of probabilistic methodsand large robust deterministic systems like's Fidditch.	S-161
CTR	Experience so far suggests that systems like LHIP may in the right circumstances provide an alternative to these approaches .	S-162
OWN	It combines the advantages of Prolog-interpreted DCGs ( ease of modification , parser output suitable for direct use by other programs , etc. ) with the ability to relax the adjacency constraints of that formalism in a flexible and dynamic manner .	S-163
OWN	LHIP is based on the assumption that partial results can be useful ( often much more useful than no result at all ) , and that an approximation to complete coverage is more useful when it comes with indications of how approximate it is .	S-164
OWN	This latter point is especially important in cases where a grammar must be usable to some degree at a relatively early stage in its development , as is , for example , the case with the development of a grammar for the Map Task Corpus .	S-165
OWN	In the near future , we expect to apply LHIP to a different problem , that of defining a restricted language for specialized parsing .	S-166
OWN	The rationale for the distinction between sanctioned and unsanctioned non-coverage of input is twofold .	S-167
OWN	First , the ` ignore ' facility permits different categories of unidentified input to be distinguished .	S-168
OWN	For example , it may be interesting to separate material which occurs at the start of the input from that appearing elsewhere .	S-169
OWN	Ignore rules have a similar functionality to that of normal rules .	S-170
OWN	In particular , they can have arguments , and may therefore be used to assign a structure to unidentified input so that it may be flagged as such within an overall parse .	S-171
OWN	Secondly , by setting a threshold value of 1 , LHIP can be made to perform like a standardly interpreted Prolog DCG , though somewhat more efficiently due to the use of the chart .	S-172
OWN	A number of possible extensions to the system can be envisaged .	S-173
OWN	Whereas at present each rule is compiled individually , it would be preferable to enhance preprocessing in order to compute certain kinds of global information from the grammar .	S-174
OWN	One improvement would be to determine possible linking of ` root-to-head ' sequences of rules , and index these to terminal items for use as an oracle during analysis .	S-175
OWN	A second would be to identify those items whose early analysis would most strongly reduce the search space for subsequent processing and scan the input to begin parsing at those points rather than proceeding strictly from left to right .	S-176
OWN	This further suggests the possibility of a parallel approach to parsing .	S-177
OWN	We expect that these measures would increase the efficiency of LHIP .	S-178
OWN	Currently , also , results are returned in an order determined by the order of rules in the grammar .	S-179
OWN	It would be preferable to arrange matters in a more cooperative fashion so that the best ( those with the highest coverage to span ratio ) are displayed first .	S-180
OWN	Support for bidirectional parsingis another candidate for inclusion in a later version .	S-181
OWN	These appear to be longer-term research goals , however .	S-182
OWN	The authors would like to thank Louis des Tombe and Dominique Estival for comments on earlier versions of this paper .	S-183
