<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE PAPER SYSTEM "paper-structure.dtd">
<PAPER>
<METADATA>
<FILENO>9504034</FILENO>
<APPEARED><CONFERENCE>ACL</CONFERENCE><YEAR>1995</YEAR></APPEARED>
<CLASSIFICATION> Lg.Pr.St </CLASSIFICATION>
</METADATA>
<TITLE> <REFAUTHOR>Bayes</REFAUTHOR> -ian Grammar Induction for Language Modeling </TITLE>
<AUTHORLIST>
<AUTHOR>Stanley F. Chen</AUTHOR>
</AUTHORLIST>
<ABSTRACT>
<A-S ID='A-0' DOCUMENTC='S-7' AZ='AIM'> We describe a corpus-based induction algorithm for probabilistic context-free grammars . </A-S>
<A-S ID='A-1' DOCUMENTC='S-9' AZ='OWN'> The algorithm employs a greedy heuristic search within a <REFAUTHOR>Bayes</REFAUTHOR> -ian framework , and a post-pass using the Inside-Outside algorithm . </A-S>
<A-S ID='A-2' DOCUMENTC='S-115' AZ='CTR'> We compare the performance of our algorithm to n-gram models and the Inside-Outside algorithm in three language modeling tasks . </A-S>
<A-S ID='A-3' AZ='CTR'> In two of the tasks , the training data is generated by a probabilistic context-free grammar and in both tasks our algorithm outperforms the other techniques . </A-S>
<A-S ID='A-4' AZ='CTR'> The third task involves naturally-occurring data , and in this task our algorithm does not perform as well as n-gram models but vastly outperforms the Inside-Outside algorithm . </A-S>
</ABSTRACT>
<BODY>
<DIV DEPTH='1'>
<HEADER ID='H-0'> Introduction </HEADER>
<P>
<S ID='S-0' AZ='BKG'> In applications such as speech recognition , handwriting recognition , and spelling correction , performance is limited by the quality of the language model utilized <REF TYPE='P'>Bahl et al. 1978</REF> , <REF TYPE='P'>Baker 1975</REF> , <REF  TYPE='P'>Kernighan et al. 1990</REF>, <REF  TYPE='P'>Srihari and Baltus 1992</REF> . </S>
<S ID='S-1' AZ='BKG'> However , static language modeling performance has remained basically unchanged since the advent of n-gram language models forty years ago <REF TYPE='P'>Shannon 1951</REF> . </S>
<S ID='S-2' AZ='CTR'> Yet , n-gram language models can only capture dependencies within an n-word window , where currently the largest practical n for natural language is three , and many dependencies in natural language occur beyond a three-word window . </S>
<S ID='S-3' AZ='CTR'> In addition , n-gram models are extremely large , thus making them difficult to implement efficiently in memory-constrained applications . </S>
</P>
<P>
<S ID='S-4' AZ='OTH'> An appealing alternative is grammar-based language models . </S>
<S ID='S-5' AZ='OTH'> Language models expressed as a probabilistic grammar tend to be more compact than n-gram language models , and have the ability to model long-distance dependencies <REF TYPE='P'>Lari and Young 1990</REF> , <REF  TYPE='P'>Resnik 1992</REF>, <REF  TYPE='P'>Schabes 1992</REF> . </S>
<S ID='S-6' AZ='CTR'> However , to date there has been little success in constructing grammar-based language models competitive with n-gram models in problems of any magnitude . </S>
</P>
<P>
<S ID='S-7' ABSTRACTC='A-0' AZ='AIM'> In this paper , we describe a corpus-based induction algorithm for probabilistic context-free grammars that outperforms n-gram models and the Inside-Outside algorithm <REF TYPE='P'>Baker 1979</REF> in medium-sized domains . </S>
<S ID='S-8' AZ='CTR'> This result marks the first time a grammar-based language model has surpassed n-gram modeling in a task of at least moderate size . </S>
<S ID='S-9' ABSTRACTC='A-1' AZ='OWN'> The algorithm employs a greedy heuristic search within a <REFAUTHOR>Bayes</REFAUTHOR> -ian framework , and a post-pass using the Inside-Outside algorithm . </S>
</P>
<IMAGE ID='I-0'/>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-1'> Grammar Induction as Search </HEADER>
<P>
<S ID='S-10' AZ='BKG'> Grammar induction can be framed as a search problem , and has been framed as such almost without exception in past research <REF TYPE='P'>Angluin and Smith 1983</REF> . </S>
<S ID='S-11' AZ='BKG'> The search space is taken to be some class of grammars ; for example , in our work we search within the space of probabilistic context-free grammars . </S>
<S ID='S-12' AZ='BKG'> The objective function is taken to be some measure dependent on the training data ; one generally wants to find a grammar that in some sense accurately models the training data . </S>
</P>
<P>
<S ID='S-13' AZ='OTH'> Most work in language modeling , including n-gram models and the Inside-Outside algorithm , falls under the maximum-likelihood paradigm , where one takes the objective function to be the likelihood of the training data given the grammar . </S>
<S ID='S-14' AZ='CTR'> However , the optimal grammar under this objective function is one which generates only strings in the training data and no other strings . </S>
<S ID='S-15' AZ='CTR'> Such grammars are poor language models , as they overfit the training data and do not model the language at large . </S>
<S ID='S-16' AZ='OTH'> In n-gram models and the Inside-Outside algorithm , this issue is evaded by bounding the size and form of the grammars considered , so that the `` optimal '' grammar cannot be expressed . </S>
<S ID='S-17' AZ='CTR'> However , in our work we do not wish to limit the size of the grammars considered . </S>
</P>
<P>
<S ID='S-18' AZ='CTR'> The basic shortcoming of the maximum-likelihood objective function is that it does not encompass the compelling intuition behind Occam 's Razor , that simpler ( or smaller ) grammars are preferable over complex ( or larger ) grammars . </S>
<S ID='S-19' AZ='OTH'> A factor in the objective function that favors smaller grammars over large can prevent the objective function from preferring grammars that overfit the training data . </S>
<S ID='S-20' AZ='OTH'> <REF TYPE='A'>Solomonoff 1964</REF> presents a <REFAUTHOR>Bayes</REFAUTHOR> -ian grammar induction framework that includes such a factor in a motivated manner . </S>
</P>
<P>
<S ID='S-21' AZ='BKG'> The goal of grammar induction is taken to be finding the grammar with the largest a posteriori probability given the training data , that is , finding the grammar G ' where </S>
</P>
<IMAGE ID='I-1'/>
<P>
<S ID='S-22' AZ='BKG'> and where we denote the training data as O , for observations . </S>
<S ID='S-23' AZ='OWN'> As it is unclear how to estimate <EQN/> directly , we apply <REFAUTHOR>Bayes</REFAUTHOR>  's Rule and get </S>
</P>
<IMAGE ID='I-2'/>
<P>
<S ID='S-24' AZ='OWN'> Hence , we can frame the search for G ' as a search with the objective function <EQN/> , the likelihood of the training data multiplied by the prior probability of the grammar . </S>
</P>
<P>
<S ID='S-25' AZ='OWN'> We satisfy the goal of favoring smaller grammars by choosing a prior that assigns higher probabilities to such grammars . </S>
<S ID='S-26' AZ='BAS'> In particular , <REFAUTHOR>Solomonoff</REFAUTHOR> proposes the use of the universal a priori probability <REF TYPE='P'>Solomonoff 1960</REF> , which is closely related to the minimum description length principle later proposed by <REF TYPE='A'>Rissanen 1978</REF> . </S>
<S ID='S-27' AZ='OTH'> In the case of grammatical language modeling , this corresponds to taking </S>
</P>
<IMAGE ID='I-3'/>
<P>
<S ID='S-28' AZ='OTH'> where <EQN/> is the length of the description of the grammar in bits . </S>
<S ID='S-29' AZ='OTH'> The universal a priori probability has many elegant properties , the most salient of which is that it dominates all other enumerable probability distributions multiplicatively . </S>
</P>
<IMAGE ID='I-4'/>
<IMAGE ID='I-5'/>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-2'> Search Algorithm </HEADER>
<P>
<S ID='S-30' AZ='OWN'> As described above , we take grammar induction to be the search for the grammar G ' that optimizes the objective function <EQN/> . </S>
<S ID='S-31' AZ='OWN'> While this framework does not restrict us to a particular grammar formalism , in our work we consider only probabilistic context-free grammars . </S>
</P>
<P>
<S ID='S-32' AZ='OWN'> We assume a simple greedy search strategy . </S>
<S ID='S-33' AZ='OWN'> We maintain a single hypothesis grammar which is initialized to a small , trivial grammar . </S>
<S ID='S-34' AZ='OWN'> We then try to find a modification to the hypothesis grammar , such as the addition of a grammar rule , that results in a grammar with a higher score on the objective function . </S>
<S ID='S-35' AZ='OWN'> When we find a superior grammar , we make this the new hypothesis grammar . </S>
<S ID='S-36' AZ='OWN'> We repeat this process until we can no longer find a modification that improves the current hypothesis grammar . </S>
</P>
<P>
<S ID='S-37' AZ='OWN'> For our initial grammar , we choose a grammar that can generate any string , to assure that the grammar can cover the training data . </S>
<S ID='S-38' AZ='OWN'> The initial grammar is listed in Table <CREF/> . </S>
<S ID='S-39' AZ='OWN'> The sentential symbol S expands to a sequence of X 's , where X expands to every other nonterminal symbol in the grammar . </S>
<S ID='S-40' AZ='OWN'> Initially , the set of nonterminal symbols consists of a different nonterminal symbol expanding to each terminal symbol . </S>
</P>
<P>
<S ID='S-41' AZ='OWN'> Notice that this grammar models a sentence as a sequence of independently generated nonterminal symbols . </S>
<S ID='S-42' AZ='OWN'> We maintain this property throughout the search process , that is , for every symbol A ' that we add to the grammar , we also add a rule <EQN/> . </S>
<S ID='S-43' AZ='OWN'> This assures that the sentential symbol can expand to every symbol ; otherwise , adding a symbol will not affect the probabilities that the grammar assigns to strings . </S>
</P>
<P>
<S ID='S-44' AZ='OWN'> We use the term move set to describe the set of modifications we consider to the current hypothesis grammar to hopefully produce a superior grammar . </S>
<S ID='S-45' AZ='OWN'> Our move set includes the following moves : </S>
</P>
<P>
<S ID='S-46' TYPE='ITEM' AZ='OWN' > Move 1 : Create a rule of the form <EQN/> </S>
<S ID='S-47' TYPE='ITEM' AZ='OWN' > Move 2 : Create a rule of the form <EQN/> </S>
</P>
<P>
<S ID='S-48' AZ='OWN'> For any context-free grammar , it is possible to express a weakly equivalent grammar using only rules of these forms . </S>
<S ID='S-49' AZ='OWN'> As mentioned before , with each new symbol A we also create a rule <EQN/> . </S>
</P>
<DIV DEPTH='2'>
<HEADER ID='H-3'> Evaluating the Objective Function </HEADER>
<P>
<S ID='S-50' AZ='OWN'> Consider the task of calculating the objective function <EQN/> for some grammar G . </S>
<S ID='S-51' AZ='OWN'> Calculating <EQN/> is inexpensive ; however , calculating <EQN/> requires a parsing of the entire training data . </S>
<S ID='S-52' AZ='OWN'> We cannot afford to parse the training data for each grammar considered ; indeed , to ever be practical for data sets of millions of words , it seems likely that we can only afford to parse the data once . </S>
</P>
<P>
<S ID='S-53' AZ='OWN'> To achieve this goal , we employ several approximations . </S>
<S ID='S-54' AZ='OWN'> First , notice that we do not ever need to calculate the actual value of the objective function ; we need only to be able to distinguish when a move applied to the current hypothesis grammar produces a grammar that has a higher score on the objective function , that is , we need only to be able to calculate the difference in the objective function resulting from a move . </S>
<S ID='S-55' AZ='OWN'> This can be done efficiently if we can quickly approximate how the probability of the training data changes when a move is applied . </S>
</P>
<P>
<S ID='S-56' AZ='OWN'> To make this possible , we approximate the probability of the training data <EQN/> by the probability of the single most probable parse , or Viterbi parse , of the training data . </S>
<S ID='S-57' AZ='OWN'> Furthermore , instead of recalculating the Viterbi parse of the training data from scratch when a move is applied , we use heuristics to predict how a move will change the Viterbi parse . </S>
<S ID='S-58' AZ='OWN'> For example , consider the case where the training data consists of the two sentences </S>
</P>
<IMAGE ID='I-6'/>
<P>
<S ID='S-59' AZ='OWN'> In Figure <CREF/> , we display the Viterbi parse of this data under the initial hypothesis grammar used in our algorithm . </S>
</P>
<P>
<S ID='S-60' AZ='OWN'> Now , let us consider the move of adding the rule  </S>
</P>
<IMAGE ID='I-7'/>
<P>
<S ID='S-61' AZ='OWN'> to the initial grammar ( as well as the concomitant rule <EQN/> ) . </S>
<S ID='S-62' AZ='OWN'> A reasonable heuristic for predicting how the Viterbi parse will change is to replace adjacent X 's that expand to <EQN/> and <EQN/> respectively with a single X that expands to B , as displayed in Figure <CREF/> . </S>
<S ID='S-63' AZ='OWN'> This is the actual heuristic we use for moves of the form <EQN/> , and we have analogous heuristics for each move in our move set . </S>
<S ID='S-64' AZ='OWN'> By predicting the differences in the Viterbi parse resulting from a move , we can quickly estimate the change in the probability of the training data . </S>
</P>
<P>
<S ID='S-65' AZ='OWN'> Notice that our predicted Viterbi parse can stray a great deal from the actual Viterbi parse , as errors can accumulate as move after move is applied . </S>
<S ID='S-66' AZ='OWN'> To minimize these effects , we process the training data incrementally . </S>
<S ID='S-67' AZ='OWN'> Using our initial hypothesis grammar , we parse the first sentence of the training data and search for the optimal grammar over just that one sentence using the described search framework . </S>
<S ID='S-68' AZ='OWN'> We use the resulting grammar to parse the second sentence , and then search for the optimal grammar over the first two sentences using the last grammar as the starting point . </S>
<S ID='S-69' AZ='OWN'> We repeat this process , parsing the next sentence using the best grammar found on the previous sentences and then searching for the best grammar taking into account this new sentence , until the entire training corpus is covered . </S>
</P>
<P>
<S ID='S-70' AZ='OWN'> Delaying the parsing of a sentence until all of the previous sentences are processed should yield more accurate Viterbi parses during the search process than if we simply parse the whole corpus with the initial hypothesis grammar . </S>
<S ID='S-71' AZ='OWN'> In addition , we still achieve the goal of parsing each sentence but once . </S>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-4'> Parameter Training </HEADER>
<P>
<S ID='S-72' AZ='TXT'> In this section , we describe how the parameters of our grammar , the probabilities associated with each grammar rule , are set . </S>
<S ID='S-73' AZ='OWN'> Ideally , in evaluating the objective function for a particular grammar we should use its optimal parameter settings given the training data , as this is the full score that the given grammar can achieve . </S>
<S ID='S-74' AZ='OWN'> However , searching for optimal parameter values is extremely expensive computationally . </S>
<S ID='S-75' AZ='OWN'> Instead , we grossly approximate the optimal values by deterministically setting parameters based on the Viterbi parse of the training data parsed so far . </S>
<S ID='S-76' AZ='OWN'> We rely on the post-pass , described later , to refine parameter values . </S>
</P>
<P>
<S ID='S-77' AZ='OWN'> Referring to the rules in Table <CREF/> , the parameter <EQN/> is set to an arbitrary small constant . </S>
<S ID='S-78' AZ='OWN'> The values of the parameters <EQN/> are set to the ( smoothed ) frequency of the <EQN/> reduction in the Viterbi parse of the data seen so far . </S>
<S ID='S-79' AZ='OWN'> The remaining symbols are set to expand uniformly among their possible expansions . </S>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-5'> Constraining Moves </HEADER>
<P>
<S ID='S-80' AZ='OWN'> Consider the move of creating a rule of the form <EQN/> . </S>
<S ID='S-81' AZ='OWN'> This corresponds to <EQN/> different specific rules that might be created , where k is the current number of symbols in the grammar . </S>
<S ID='S-82' AZ='OWN'> As it is too computationally expensive to consider each of these rules at every point in the search , we use heuristics to constrain which moves are appraised . </S>
</P>
<P>
<S ID='S-83' AZ='OWN'> For the left-hand side of a rule , we always create a new symbol . </S>
<S ID='S-84' AZ='OWN'> This heuristic selects the optimal choice the vast majority of the time ; however , under this constraint the moves described earlier in this section cannot yield arbitrary context-free languages . </S>
<S ID='S-85' AZ='OWN'> To partially address this , we add the move </S>
</P>
<P>
<S ID='S-86' TYPE='ITEM' AZ='OWN' > Move 3 : Create a rule of the form <EQN/> </S>
</P>
<P>
<S ID='S-87' AZ='OWN'> With this iteration move , we can construct grammars that generate arbitrary regular languages . </S>
<S ID='S-88' AZ='OWN'> As yet , we have not implemented moves that enable the construction of arbitrary context-free grammars ; this belongs to future work . </S>
</P>
<P>
<S ID='S-89' AZ='OWN'> To constrain the symbols we consider on the right-hand side of a new rule , we use what we call triggers . </S>
<S ID='S-90' AZ='OWN'> A trigger is a phenomenon in the Viterbi parse of a sentence that is indicative that a particular move might lead to a better grammar . </S>
<S ID='S-91' AZ='OWN'> For example , in Figure <CREF/> the fact that the symbols <EQN/> and <EQN/> occur adjacently is indicative that it could be profitable to create a rule <EQN/> . </S>
<S ID='S-92' AZ='OWN'> We have developed a set of triggers for each move in our move set , and only consider a specific move if it is triggered in the sentence currently being parsed in the incremental processing . </S>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-6'> Post-Pass </HEADER>
<P>
<S ID='S-93' AZ='OWN'> A conspicuous shortcoming in our search framework is that the grammars in our search space are fairly unexpressive . </S>
<S ID='S-94' AZ='OWN'> Firstly , recall that our grammars model a sentence as a sequence of independently generated symbols ; however , in language there is a large dependence between adjacent constituents . </S>
<S ID='S-95' AZ='OWN'> Furthermore , the only free parameters in our search are the parameters <EQN/> ; all other symbols ( except S ) are fixed to expand uniformly . </S>
<S ID='S-96' AZ='OWN'> These choices were necessary to make the search tractable . </S>
</P>
<P>
<S ID='S-97' AZ='OWN'> To address this issue , we use an Inside-Outside algorithm post-pass . </S>
<S ID='S-98' AZ='OWN'> Our methodology is derived from that described by  <REF TYPE='A'>Lari 1990</REF> . </S>
<S ID='S-99' AZ='OWN'> We create n new nonterminal symbols <EQN/> , and create all rules of the form : </S>
</P>
<IMAGE ID='I-8'/>
<P>
<S ID='S-100' AZ='OWN'> <EQN/> denotes the set of nonterminal symbols acquired in the initial grammar induction phase , and <EQN/> is taken to be the new sentential symbol . </S>
<S ID='S-101' AZ='OWN'> These new rules replace the first three rules listed in Table <CREF/> . </S>
<S ID='S-102' AZ='OWN'> The parameters of these rules are initialized randomly . </S>
<S ID='S-103' AZ='OWN'> Using this grammar as the starting point , we run the Inside-Outside algorithm on the training data until convergence . </S>
</P>
<P>
<S ID='S-104' AZ='OWN'> In other words , instead of using the naive <EQN/> rule to attach symbols together in parsing data , we now use the <EQN/> rules and depend on the Inside-Outside algorithm to train these randomly initialized rules intelligently . </S>
<S ID='S-105' AZ='OWN'> This post-pass allows us to express dependencies between adjacent symbols . </S>
<S ID='S-106' AZ='OWN'> In addition , it allows us to train parameters that were fixed during the initial grammar induction phase . </S>
</P>
</DIV>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-7'> Previous Work </HEADER>
<P>
<S ID='S-107' AZ='BAS'> As mentioned , this work employs the <REFAUTHOR>Bayes</REFAUTHOR> -ian grammar induction framework described by <REF  TYPE='A'>Solomonoff 1960</REF>, <REF  TYPE='A'>Solomonoff 1964</REF> . </S>
<S ID='S-108' AZ='CTR'> However , <REFAUTHOR>Solomonoff</REFAUTHOR> does not specify a concrete search algorithm and only makes suggestions as to its nature . </S>
</P>
<P>
<S ID='S-109' AZ='OTH'> Similar research includes work by <REF TYPE='A'>Cook et al. 1976</REF> and <REF TYPE='A'>Stolcke and Omohundro 1994</REF> . </S>
<S ID='S-110' AZ='OTH'> This work also employs a heuristic search within a <REFAUTHOR>Bayes</REFAUTHOR> -ian framework . </S>
<S ID='S-111' AZ='CTR'> However , a different prior probability on grammars is used , and the algorithms are only efficient enough to be applied to small data sets . </S>
</P>
<P>
<S ID='S-112' AZ='OTH'> The grammar induction algorithms most successful in language modeling include the Inside-Outside algorithm <REF TYPE='P'>Lari and Young 1990</REF> , <REF TYPE='P'>Lari and Young 1991</REF> , <REF TYPE='P'>Pereira and Schabes 1992</REF> , a special case of the Expectation-Maximization algorithm <REF TYPE='P'>Dempster et al. 1977</REF> , and work by <REF TYPE='A'>McCandless 1993</REF> . </S>
<S ID='S-113' AZ='OTH'> In the latter work , <REFAUTHOR>McCandless</REFAUTHOR> uses a heuristic search procedure similar to ours , but a very different search criteria . </S>
<S ID='S-114' AZ='CTR'> To our knowledge , neither algorithm has surpassed the performance of n-gram models in a language modeling task of substantial scale . </S>
</P>
<IMAGE ID='I-9'/>
<IMAGE ID='I-10'/>
<IMAGE ID='I-11'/>
<IMAGE ID='I-12'/>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-8'> Results </HEADER>
<P>
<S ID='S-115' ABSTRACTC='A-2' AZ='CTR'> To evaluate our algorithm , we compare the performance of our algorithm to that of n-gram models and the Inside-Outside algorithm . </S>
</P>
<P>
<S ID='S-116' AZ='OTH'> For n-gram models , we tried <EQN/> for each domain . </S>
<S ID='S-117' AZ='OTH'> For smoothing a particular n-gram model , we took a linear combination of all lower order n-gram models . </S>
<S ID='S-118' AZ='OTH'> In particular , we follow standard practice <REF TYPE='P'>Jelinek and Mercer 1980</REF> , <REF TYPE='P'>Bahl et al. 1983</REF> , <REF TYPE='P'>Brown et al. 1992</REF> and take the smoothed i-gram probability to be a linear combination of the i-gram frequency in the training data and the smoothed ( i - 1 ) - gram probability , that is ,  </S>
</P>
<IMAGE ID='I-13'/>
<P>
<S ID='S-119' AZ='OTH'> where c ( W ) denotes the count of the word sequence W in the training data . </S>
<S ID='S-120' AZ='OTH'> The smoothing parameters <EQN/> are trained through the Forward-Backward algorithm <REF TYPE='P'>Baum and Eagon 1967</REF> on held-out data . </S>
<S ID='S-121' AZ='OTH'> Parameters <EQN/> are tied together for similar c to prevent data sparsity . </S>
</P>
<P>
<S ID='S-122' AZ='OTH'> For the Inside-Outside algorithm , we follow the methodology described by <REFAUTHOR>Lari and Young</REFAUTHOR> . </S>
<S ID='S-123' AZ='OTH'> For a given n , we create a probabilistic context-free grammar consisting of all Chomsky normal form rules over the n nonterminal symbols <EQN/> and the given terminal symbols , that is , all rules  </S>
</P>
<IMAGE ID='I-14'/>
<P>
<S ID='S-124' AZ='OTH'> where T denotes the set of terminal symbols in the domain . </S>
<S ID='S-125' AZ='OTH'> All parameters are initialized randomly . </S>
<S ID='S-126' AZ='OTH'> From this starting point , the Inside-Outside algorithm is run until convergence . </S>
</P>
<P>
<S ID='S-127' AZ='OTH'> For smoothing , we combine the expansion distribution of each symbol with a uniform distribution , that is , we take the smoothed parameter <EQN/> to be </S>
</P>
<IMAGE ID='I-15'/>
<P>
<S ID='S-128' AZ='OTH'> where <EQN/> denotes the unsmoothed parameter . </S>
<S ID='S-129' AZ='OTH'> The value <EQN/> is the number of different ways a symbol expands under the <REFAUTHOR>Lari and Young</REFAUTHOR> methodology . </S>
<S ID='S-130' AZ='OTH'> The parameter <EQN/> is trained through the Inside-Outside algorithm on held-out data . </S>
<S ID='S-131' AZ='OTH'> This smoothing is also performed on the Inside-Outside post-pass of our algorithm . </S>
<S ID='S-132' AZ='OTH'> For each domain , we tried <EQN/> . </S>
</P>
<P>
<S ID='S-133' AZ='OWN'> Because of the computational demands of our algorithm , it is currently impractical to apply it to large vocabulary or large training set problems . </S>
<S ID='S-134' AZ='OWN'> However , we present the results of our algorithm in three medium-sized domains . </S>
<S ID='S-135' AZ='OWN'> In each case , we use 4500 sentences for training , with 500 of these sentences held out for smoothing . </S>
<S ID='S-136' AZ='OWN'> We test on 500 sentences , and measure performance by the entropy of the test data . </S>
</P>
<P>
<S ID='S-137' AZ='OWN'> In the first two domains , we created the training and test data artificially so as to have an ideal grammar in hand to benchmark results . </S>
<S ID='S-138' AZ='OWN'> In particular , we used a probabilistic grammar to generate the data . </S>
<S ID='S-139' AZ='OWN'> In the first domain , we created this grammar by hand ; the grammar was a small English-like probabilistic context-free grammar consisting of roughly 10 nonterminal symbols , 20 terminal symbols , and 30 rules . </S>
<S ID='S-140' AZ='OWN'> In the second domain , we derived the grammar from manually parsed text . </S>
<S ID='S-141' AZ='OWN'> From a million words of parsed Wall Street Journal data from the Penn treebank , we extracted the 20 most frequently occurring symbols , and the 10 most frequently occurring rules expanding each of these symbols . </S>
<S ID='S-142' AZ='OWN'> For each symbol that occurs on the right-hand side of a rule but which was not one of the most frequent 20 symbols , we create a rule that expands that symbol to a unique terminal symbol . </S>
<S ID='S-143' AZ='OWN'> After removing unreachable rules , this yields a grammar of roughly 30 nonterminals , 120 terminals , and 160 rules . </S>
<S ID='S-144' AZ='OWN'> Parameters are set to reflect the frequency of the corresponding rule in the parsed corpus . </S>
</P>
<P>
<S ID='S-145' AZ='OWN'> For the third domain , we took English text and reduced the size of the vocabulary by mapping each word to its part-of-speech tag . </S>
<S ID='S-146' AZ='OWN'> We used tagged Wall Street Journal text from the Penn treebank , which has a tag set size of about fifty . </S>
</P>
<P>
<S ID='S-147' AZ='OWN'> In Tables <CREF/> - <CREF/> , we summarize our results . </S>
<S ID='S-148' AZ='OWN'> The ideal grammar denotes the grammar used to generate the training and test data . </S>
<S ID='S-149' AZ='OWN'> For each algorithm , we list the best performance achieved over all n tried , and the best n column states which value realized this performance . </S>
</P>
<P>
<S ID='S-150' AZ='CTR'> We achieve a moderate but significant improvement in performance over n-gram models and the Inside-Outside algorithm in the first two domains , while in the part-of-speech domain we are outperformed by n-gram models but we vastly outperform the Inside-Outside algorithm . </S>
</P>
<P>
<S ID='S-151' AZ='OWN'> In Table <CREF/> , we display a sample of the number of parameters and execution time ( on a Decstation 5000 / 33 ) associated with each algorithm . </S>
<S ID='S-152' AZ='OWN'> We choose n to yield approximately equivalent performance for each algorithm . </S>
<S ID='S-153' AZ='OWN'> The first pass row refers to the main grammar induction phase of our algorithm , and the post-pass row refers to the Inside-Outside post-pass . </S>
</P>
<P>
<S ID='S-154' AZ='CTR'> Notice that our algorithm produces a significantly more compact model than the n-gram model , while running significantly faster than the Inside-Outside algorithm even though we use an Inside-Outside post-pass . </S>
<S ID='S-155' AZ='OWN'> Part of this discrepancy is due to the fact that we require a smaller number of new nonterminal symbols to achieve equivalent performance , but we have also found that our post-pass converges more quickly even given the same number of nonterminal symbols . </S>
</P>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-9'> Discussion </HEADER>
<P>
<S ID='S-156' AZ='CTR'> Our algorithm consistently outperformed the Inside-Outside algorithm in these experiments . </S>
<S ID='S-157' AZ='OWN'> While we partially attribute this difference to using a <REFAUTHOR>Bayes</REFAUTHOR> -ian instead of maximum-likelihood objective function , we believe that part of this difference results from a more effective search strategy . </S>
<S ID='S-158' AZ='OWN'> In particular , though both algorithms employ a greedy hill-climbing strategy , our algorithm gains an advantage by being able to add new rules to the grammar . </S>
</P>
<P>
<S ID='S-159' AZ='OTH'> In the Inside-Outside algorithm , the gradient descent search discovers the `` nearest '' local minimum in the search landscape to the initial grammar . </S>
<S ID='S-160' AZ='OTH'> If there are k rules in the grammar and thus k parameters , then the search takes place in a fixed k-dimensional space <EQN/> . </S>
<S ID='S-161' AZ='OWN'> In our algorithm , it is possible to expand the hypothesis grammar , thus increasing the dimensionality of the parameter space that is being searched . </S>
<S ID='S-162' AZ='OWN'> An apparent local minimum in the space <EQN/> may no longer be a local minimum in the space <EQN/> ; the extra dimension may provide a pathway for further improvement of the hypothesis grammar . </S>
<S ID='S-163' AZ='CTR'> Hence , our algorithm should be less prone to suboptimal local minima than the Inside-Outside algorithm . </S>
</P>
<P>
<S ID='S-164' AZ='CTR'> Outperforming n-gram models in the first two domains demonstrates that our algorithm is able to take advantage of the grammatical structure present in data . </S>
<S ID='S-165' AZ='CTR'> However , the superiority of n-gram models in the part-of-speech domain indicates that to be competitive in modeling naturally-occurring data , it is necessary to model collocational information accurately . </S>
<S ID='S-166' AZ='OWN'> We need to modify our algorithm to more aggressively model n-gram information . </S>
</P>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-10'> Conclusion </HEADER>
<P>
<S ID='S-167' AZ='BKG'> This research represents a step forward in the quest for developing grammar-based language models for natural language . </S>
<S ID='S-168' AZ='AIM'> We induce models that , while being substantially more compact , outperform n-gram language models in medium-sized domains . </S>
<S ID='S-169' AZ='OWN'> The algorithm runs essentially in time and space linear in the size of the training data , so larger domains are within our reach . </S>
</P>
<P>
<S ID='S-170' AZ='BAS'> However , we feel the largest contribution of this work does not lie in the actual algorithm specified , but rather in its indication of the potential of the induction framework described by <REFAUTHOR>Solomonoff</REFAUTHOR> in 1964 . </S>
<S ID='S-171' AZ='OWN'> We have implemented only a subset of the moves that we have developed , and inspection of our results gives reason to believe that these additional moves may significantly improve the performance of our algorithm . </S>
</P>
<P>
<S ID='S-172' AZ='OTH'> <REFAUTHOR>Solomonoff</REFAUTHOR> 's induction framework is not restricted to probabilistic context-free grammars . </S>
<S ID='S-173' AZ='OWN'> After completing the implementation of our move set , we plan to explore the modeling of context-sensitive phenomena . </S>
<S ID='S-174' AZ='BAS'> This work demonstrates that <REFAUTHOR>Solomonoff</REFAUTHOR> 's elegant framework deserves much further consideration . </S>
</P>
</DIV>
</BODY>
<REFERENCELIST>
<REFERENCE>
D. <SURNAME>Angluin</SURNAME> and C.H. <SURNAME>Smith</SURNAME>.
<DATE>1983</DATE>.
Inductive inference: theory and methods.
ACM Computing Surveys, 15:237-269.
</REFERENCE>
<REFERENCE>
L.R. <SURNAME>Bahl</SURNAME>, J.K. <SURNAME>Baker</SURNAME>, P.S. <SURNAME>Cohen</SURNAME>, F. <SURNAME>Jelinek</SURNAME>, B.L. <SURNAME>Lewis</SURNAME>, and R.L. <SURNAME>Mercer</SURNAME>.
<DATE>1978</DATE>.
Recognition of a continuously read natural corpus.
In Proceedings of the IEEE International Conference on
  Acoustics, Speech and Signal Processing, pages 422-424, Tulsa, Oklahoma,
  April.
</REFERENCE>
<REFERENCE>
Lalit R. <SURNAME>Bahl</SURNAME>, Frederick <SURNAME>Jelinek</SURNAME>, and Robert L. <SURNAME>Mercer</SURNAME>.
<DATE>1983</DATE>.
A maximum likelihood approach to continuous speech recognition.
IEEE Transactions on Pattern Analysis and Machine Intelligence,
  PAMI-5(2):179-190, March.
</REFERENCE>
<REFERENCE>
J.K. <SURNAME>Baker</SURNAME>.
<DATE>1975</DATE>.
The DRAGON system - an overview.
IEEE Transactions on Acoustics, Speech and Signal Processing,
  23:24-29, February.
</REFERENCE>
<REFERENCE>
J.K. <SURNAME>Baker</SURNAME>.
<DATE>1979</DATE>.
Trainable grammars for speech recognition.
In Proceedings of the Spring Conference of the Acoustical
  Society of America, pages 547-550, Boston, MA, June.
</REFERENCE>
<REFERENCE>
L.E. <SURNAME>Baum</SURNAME> and J.A. <SURNAME>Eagon</SURNAME>.
<DATE>1967</DATE>.
An inequality with application to statistical estimation for
  probabilistic functions of Markov processes and to a model for ecology.
Bulletin of the American Mathematicians Society, 73:360-363.
</REFERENCE>
<REFERENCE>
Peter F. <SURNAME>Brown</SURNAME>, Vincent <SURNAME>J</SURNAME>. DellaPietra, Peter V. deSouza, Jennifer C. Lai, and
  Robert L. Mercer.
<DATE>1992</DATE>.
Class-based n-gram models of natural language.
Computational Linguistics, 18(4):467-479, December.
</REFERENCE>
<REFERENCE>
A.P. <SURNAME>Dempster</SURNAME>, N.M. <SURNAME>Laird</SURNAME>, and D.B. <SURNAME>Rubin</SURNAME>.
<DATE>1977</DATE>.
Maximum likelihood from incomplete data via the EM algorithm.
Journal of the Royal Statistical Society, 39(B):1-38.
</REFERENCE>
<REFERENCE>
Frederick <SURNAME>Jelinek</SURNAME> and Robert L. <SURNAME>Mercer</SURNAME>.
<DATE>1980</DATE>.
Interpolated estimation of Markov source parameters from sparse
  data.
In Proceedings of the Workshop on Pattern Recognition in
  Practice, Amsterdam, The Netherlands: North-Holland, May.
</REFERENCE>
<REFERENCE>
M.D. <SURNAME>Kernighan</SURNAME>, K.W. <SURNAME>Church</SURNAME>, and W.A. <SURNAME>Gale</SURNAME>.
<DATE>1990</DATE>.
A spelling correction program based on a noisy channel model.
In Proceedings of the Thirteenth International Conference on
  Computational Linguistics, pages 205-210.
</REFERENCE>
<REFERENCE>
K. <SURNAME>Lari</SURNAME> and S.J. <SURNAME>Young</SURNAME>.
<DATE>1990</DATE>.
The estimation of stochastic context-free grammars using the
  inside-outside algorithm.
Computer Speech and Language, 4:35-56.
</REFERENCE>
<REFERENCE>
K. <SURNAME>Lari</SURNAME> and S.J. <SURNAME>Young</SURNAME>.
<DATE>1991</DATE>.
Applications of stochastic context-free grammars using the
  inside-outside algorithm.
Computer Speech and Language, 5:237-257.
</REFERENCE>
<REFERENCE>
Ming <SURNAME>Li</SURNAME> and Paul <SURNAME>Vitnyi</SURNAME>.
<DATE>1993</DATE>.
An Introduction to Kolmogorov Complexity and its
  Applications.
Springer-Verlag.
</REFERENCE>
<REFERENCE>
Michael K. <SURNAME>McCandless</SURNAME> and James R. <SURNAME>Glass</SURNAME>.
<DATE>1993</DATE>.
Empirical acquisition of word and phrase classes in the ATIS
  domain.
In Third European Conference on Speech Communication and
  Technology, Berlin, Germany, September.
</REFERENCE>
<REFERENCE>
Fernando <SURNAME>Pereira</SURNAME> and Yves <SURNAME>Schabes</SURNAME>.
<DATE>1992</DATE>.
Inside-outside reestimation from partially bracket corpora.
In Proceedings of the 30th Annual Meeting of the ACL, pages
  128-135, Newark, Delaware.
</REFERENCE>
<REFERENCE>
P. <SURNAME>Resnik</SURNAME>.
<DATE>1992</DATE>.
Probabilistic tree-adjoining grammar as a framework for statistical
  natural language processing.
In Proceedings of the 14th International Conference on
  Computational Linguistics.
</REFERENCE>
<REFERENCE>
J. <SURNAME>Rissanen</SURNAME>.
<DATE>1978</DATE>.
Modeling by the shortest data description.
Automatica, 14:465-471.
</REFERENCE>
<REFERENCE>
Y. <SURNAME>Schabes</SURNAME>.
<DATE>1992</DATE>.
Stochastic lexicalized tree-adjoining grammars.
In Proceedings of the 14th International Conference on
  Computational Linguistics.
</REFERENCE>
<REFERENCE>
C.E. <SURNAME>Shannon</SURNAME>.
<DATE>1951</DATE>.
Prediction and entropy of printed English.
Bell Systems Technical Journal, 30:50-64, January.
</REFERENCE>
<REFERENCE>
R.J. <SURNAME>Solomonoff</SURNAME>.
<DATE>1960</DATE>.
A preliminary report on a general theory of inductive inference.
Technical Report ZTB-138, Zator Company, Cambridge, MA, November.
</REFERENCE>
<REFERENCE>
R.J. <SURNAME>Solomonoff</SURNAME>.
<DATE>1964</DATE>.
A formal theory of inductive inference.
Information and Control, 7:1-22, 224-254, March, June.
</REFERENCE>
<REFERENCE>
Rohini <SURNAME>Srihari</SURNAME> and Charlotte <SURNAME>Baltus</SURNAME>.
<DATE>1992</DATE>.
Combining statistical and syntactic methods in recognizing
  handwritten sentences.
In AAAI Symposium: Probabilistic Approaches to Natural
  Language, pages 121-127.
</REFERENCE>
</REFERENCELIST>
</PAPER>
