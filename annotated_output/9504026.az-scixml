OTH	defines parsing as the calculation of the intersection of a FSA ( the input ) and a CFG .	A-0
OTH	Viewing the input for parsing as a FSA rather than as a string combines well with some approaches in speech understanding systems , in which parsing takes a word lattice as input ( rather than a word string ) .	A-1
OTH	Furthermore , certain techniques for robust parsing can be modelled as finite state transducers .	A-2
AIM	In this paper we investigate how we can generalize this approach for unification grammars .	A-3
AIM	In particular we will concentrate on how we might the calculation of the intersection of a FSA and a DCG .	A-4
OWN	It is shown that existing parsing algorithms can be easily extended for FSA inputs .	A-5
OWN	However , we also show that the termination properties change drastically : we show that it is undecidable whether the intersection of a FSA and a DCG is empty ( even if the DCG is off-line parsable ) .	A-6
OWN	Furthermore we discuss approaches to cope with the problem .	A-7
AIM	In this paper we are concerned with the syntactic analysis phase of a natural language understanding system .	S-0
BKG	Ordinarily , the input of such a system is a sequence of words .	S-1
BAS	However , followingwe argue that it might be fruitful to take the input more generally as a finite state automaton ( FSA ) to model cases in which we are uncertain about the actual input .	S-2
BKG	Parsing uncertain input might be necessary in case of ill-formed textual input , or in case of speech input .	S-3
BKG	For example , if a natural language understanding system is interfaced with a speech recognition component , chances are that this compenent is uncertain about the actual string of words that has been uttered , and thus produces a word lattice of the most promising hypotheses , rather than a single sequence of words .	S-4
BKG	FSA of course generalizes such word lattices .	S-5
OTH	As another example , certain techniques to deal with ill-formed input can be characterized as finite state transducers; the composition of an input string with such a finite state transducer results in a FSA that can then be input for syntactic parsing .	S-6
OTH	Such an approach allows for the treatment of missing , extraneous , interchanged or misused words,,.	S-7
OTH	Such techniques might be of use both in the case of written and spoken language input .	S-8
OTH	In the latter case another possible application concerns the treatment of phenomena such as repairs.	S-9
OWN	Note that we allow the input to be a full FSA ( possibly including cycles , etc. ) since some of the above-mentioned techniques indeed result in cycles .	S-10
BKG	Whereas an ordinary word-graph always defines a finite language , a FSA of course can easily define an infinite number of sentences .	S-11
BKG	Cycles might emerge to treat unknown sequences of words , i.e. sentences with unknown parts of unknown lengths.	S-12
BKG	As suggested by an ACL reviewer , one could also try to model haplology phenomena ( such as the 's in English sentences like ` The chef at Joe 's hat ' , where ` Joe 's ' is the name of a restaurant ) using a finite state transducer .	S-13
BKG	In a straightforward approach this would also lead to a finite-state automaton with cycles .	S-14
OWN	It can be shown that the computation of the intersection of a FSA and a CFG requires only a minimal generalization of existing parsing algorithms .	S-15
OWN	We simply replace the usual string positions with the names of the states in the FSA .	S-16
OWN	It is also straightforward to show that the complexity of this process is cubic in the number of states of the FSA ( in the case of ordinary parsing the number of states equals n + 1 ),( assuming the right-hand-sides of grammar rules have at most two categories ) .	S-17
AIM	In this paper we investigate whether the same techniques can be applied in case the grammar is a constraint-based grammar rather than a CFG .	S-18
OWN	For specificity we will take the grammar to be a Definite Clause Grammar ( DCG ).	S-19
BKG	A DCG is a simple example of a family of constraint-based grammar formalisms that are widely used in natural language analysis ( and generation ) .	S-20
OWN	The main findings of this paper can be extended to other members of that family of constraint-based grammar formalisms .	S-21
BKG	The calculation of the intersection of a CFG and a FSA is very simple.	S-22
BKG	The ( context-free ) grammar defining this intersection is simply constructed by keeping track of the state names in the non-terminal category symbols .	S-23
BKG	For each rulethere are rules, for all.	S-24
BKG	Furthermore for each transitionwe have a rule.	S-25
BKG	Thus the intersection of a FSA and a CFG is a CFG that exactly derives all parse-trees .	S-26
BKG	Such a grammar might be called the parse-forest grammar .	S-27
BKG	Although this construction shows that the intersection of a FSA and a CFG is itself a CFG , it is not of practical interest .	S-28
BKG	The reason is that this construction typically yields an enormous amount of rules that are ` useless ' .	S-29
BKG	In fact the ( possibly enormously large ) parse forest grammar might define an empty language ( if the intersection was empty ) .	S-30
BKG	Luckily ` ordinary ' recognizers / parsers for CFG can be easily generalized to construct this intersection yielding ( in typical cases ) a much smaller grammar .	S-31
BKG	Checking whether the intersection is empty or not is then usually very simple as well : only in the latter case will the parser terminate succesfully .	S-32
OWN	To illustrate how a parser can be generalized to accept a FSA as input we present a simple top-down parser .	S-33
OWN	A context-free grammar is represented as a definite-clause specification as follows .	S-34
OWN	We do not wish to define the sets of terminal and non-terminal symbols explicitly , these can be understood from the rules that are defined using the relation rule/2 , and where symbols of the rhs are prefixed with ` - ' in the case of terminals and ` + ' in the case of non-terminals .	S-35
OWN	The relation top/1 defines the start symbol .	S-36
OWN	The languageis defined as :	S-37
OWN	In order to illustrate how ordinary parsers can be used to compute the intersection of a FSA and a CFG consider first the definite-clause specification of a top-down parser .	S-38
OWN	This parser runs in polynomial time if implemented using Earley deduction or XOLDT resolution.	S-39
OWN	It is assumed that the input string is represented by the trans/3 predicate .	S-40
OWN	The predicate side _ effect is used to construct the parse forest grammar .	S-41
OWN	The predicate always succeeds , and as a side-effect asserts that its argument is a rule of the parse forest grammar .	S-42
OWN	For the sentence ` a a b b ' we obtain the parse forest grammar :	S-43
OWN	The reader easily verifies that indeed this grammar generates ( a isomorphism of ) the single parse tree of this example , assuming of course that the start symbol for this parse-forest grammar is.	S-44
OWN	In the parse-forest grammar , complex symbols are non-terminals , atomic symbols are terminals .	S-45
OWN	Next consider the definite clause specification of a FSA .	S-46
OWN	We define the transition relation using the relation trans/3 .	S-47
OWN	For start states , the relation start/1 should hold , and for final states the relation final/1 should hold .	S-48
OWN	Thus the following FSA , defining the regular language( i.e. an even number of a 's followed by at least one b ) is given as :	S-49
OWN	Interestingly , nothing needs to be changed to use the same parser for the computation of the intersection of a FSA and a CFG .	S-50
OWN	If our input ` sentence ' now is the definition of trans/3 as given above , we obtain the following parse forest grammar ( where the start symbol is	S-51
OWN	Thus , even though we now use the same parser for an infinite set of input sentences ( represented by the FSA ) the parser still is able to come up with a parse forest grammar .	S-52
OWN	A possible derivation for this grammar constructs the following ( abbreviated ) parse tree in figure.	S-53
CTR	Note that the construction ofwould have yielded a grammar with 88 rules .	S-54
TXT	In this section we want to generalize the ideas described above for CFG to DCG .	S-55
OTH	First note that the problem of calculating the intersection of a DCG and a FSA can be solved trivially by a generalization of the construction by.	S-56
CTR	However , if we use that method we will end up ( typically ) with an enormously large forest grammar that is not even guaranteed to contain solutions .	S-57
OWN	Therefore , we are interested in methods that only generate a small subset of this ; e.g. if the intersection is empty we want an empty parse-forest grammar .	S-58
OTH	The straightforward approach is to generalize existing recognition algorithms .	S-59
OTH	The same techniques that are used for calculating the intersection of a FSA and a CFG can be applied in the case of DCGs .	S-60
OTH	In order to compute the intersection of a DCG and a FSA we assume that FSA are represented as before .	S-61
OTH	DCGs are represented using the same notation we used for context-free grammars , but now of course the category symbols can be first-order terms of arbitrary complexity ( note that without loss of generality we don't take into account DCGs having external actions defined in curly braces ) .	S-62
CTR	But if we use existing techniques for parsing DCGs , then we are also confronted with an undecidability problem : the recognition problem for DCGs is undecidable.	S-63
CTR	A fortiori the problem of deciding whether the intersection of a FSA and a DCG is empty or not is undecidable .	S-64
OTH	This undecidability result is usually circumvented by considering subsets of DCGs which can be recognized effectively .	S-65
OTH	For example , we can restrict the attention to DCGs of which the context-free skeleton does not contain cycles .	S-66
OTH	Recognition for such ` off-line parsable ' grammars is decidable.	S-67
OTH	Most existing constraint-based parsing algorithms will terminate for grammars that exhibit the property that for each string there is only a finite number of possible derivations .	S-68
OTH	Note that off-line parsability is one possible way of ensuring that this is the case .	S-69
CTR	This observation is not very helpful in establishing insights concerning interesting subclasses of DCGs for which termination can be guaranteed ( in the case of FSA input ) .	S-70
CTR	The reason is that there are now two sources of recursion : in the DCG and in the FSA ( cycles ) .	S-71
CTR	As we saw earlier : even for CFG it holds that there can be an infinite number of analyses for a given FSA ( but in the CFG this of course does not imply undecidability ) .	S-72
OWN	I now show that the question whether the intersection of a FSA and an off-line parsable DCG is empty is undecidable .	S-73
OWN	A yes-no problem is undecidableif there is no algorithm that takes as its input an instance of the problem and determines whether the answer to that instance is ` yes ' or ` no ' .	S-74
OWN	An instance of a problem consists of a particular choice of the parameters of that problem .	S-75
OWN	I use Post 's Correspondence Problem ( PCP ) as a well-known undecidable problem .	S-76
OWN	I show that if the above mentioned intersection problem were decidable , then we could solve the PCP too .	S-77
OWN	The following definition and example of a PCP are taken from.	S-78
OWN	An instance of PCP consists of two lists ,andof strings over some alphabet.	S-79
OWN	This instance has a solution if there is any sequence of integers, with, such that .	S-80
OWN	The sequenceis a solution to this instance of PCP .	S-81
OWN	As an example , assume that.	S-82
OWN	Furthermore , letand.	S-83
OWN	A solution to this instance of PCP is the sequence 2,1,1,3 ( obtaining the sequence 101111110 ) .	S-84
OWN	For an illustration , cf. figure.	S-85
OWN	Clearly there are PCP 's that do not have a solution .	S-86
OWN	Assume again that.	S-87
OWN	Furthermore letand.	S-88
OWN	Clearly this PCP does not have a solution .	S-89
OWN	In general , however , the problem whether some PCP has a solution or not is not decidable .	S-90
BAS	This result is proved byby showing that the halting problem for Turing Machines can be encoded as an instance of Post 's Correspondence Problem .	S-91
OWN	First I give a simple algorithm to encode any instance of a PCP as a pair , consisting of a FSA and an off-line parsable DCG , in such a way that the question whether there is a solution to this PCP is equivalent to the question whether the intersection of this FSA and DCG is empty .	S-92
OWN	Encoding of PCP	S-93
OWN	For each( k the length of lists A and B ) define a DCG rule ( the i-th member of A is, and the i-th member of B is) :	S-94
OWN	Furthermore , there is a rule	S-95
OWN	Furthermore , there is a rule	S-96
OWN	Also , s is the start category of the DCG .	S-97
OWN	Finally , the FSA consists of a single state q which is both the start state and the final state , and a single transition.	S-98
OWN	This FSA generates.	S-99
OWN	Observe that the DCG is off-line parsable .	S-100
OWN	The underlying idea of the algorithm is really very simple .	S-101
OWN	For each pair of strings from the lists A and B there will be one lexical entry ( deriving the terminal x ) where these strings are represented by a difference-list encoding .	S-102
OWN	Furthermore there is a general combination rule that simply concatenates A-strings and concatenates B-strings .	S-103
OWN	Finally the rule for s states that in order to construct a succesful top category the A and B lists must match .	S-104
OWN	The resulting DCG , FSA pair for the example PCP is given in figure:	S-105
OWN	Proposition	S-106
OWN	The question whether the intersection of a FSA and an off-line parsable DCG is empty is undecidable .	S-107
OWN	Proof	S-108
OWN	Suppose the problem was decidable .	S-109
OWN	In that case there would exist an algorithm for solving the problem .	S-110
OWN	This algorithm could then be used to solve the PCP , because a PCPhas a solution if and only if its encoding given above as a FSA and an off-line parsable DCG is not empty .	S-111
OWN	The PCP problem however is known to be undecidable .	S-112
OWN	Hence the intersection question is undecidable too .	S-113
OWN	The following approaches towards the undecidability problem can be taken :	S-114
OWN	limit the power of the FSA	S-115
OWN	limit the power of the DCG	S-116
OWN	compromise completeness	S-117
OWN	compromise soundness	S-118
OWN	These approaches are discussed now in turn .	S-119
OWN	Limit the FSA	S-120
OWN	Rather than assuming the input for parsing is a FSA in its full generality , we might assume that the input is an ordinary word graph ( a FSA without cycles ) .	S-121
OWN	Thus the techniques for robust processing that give rise to such cycles cannot be used .	S-122
OWN	One example is the processing of an unknown sequence of words , e.g. in case there is noise in the input and it is not clear how many words have been uttered during this noise .	S-123
OWN	It is not clear to me right now what we loose ( in practical terms ) if we give up such cycles .	S-124
OWN	Note that it is easy to verify that the question whether the intersection of a word-graph and an off-line parsable DCG is empty or not is decidable since it reduces to checking whether the DCG derives one of a finite number of strings .	S-125
OWN	Limit the DCG	S-126
OWN	Another approach is to limit the size of the categories that are being employed .	S-127
OWN	This is the GPSG and F-TAG approach .	S-128
OWN	In that case we are not longer dealing with DCGs but rather with CFGs ( which have been shown to be insufficient in general for the description of natural languages ) .	S-129
OWN	Compromise Completeness	S-130
OWN	Completeness in this context means : the parse forest grammar contains all possible parses .	S-131
OWN	It is possible to compromise here , in such a way that the parser is guaranteed to terminate , but sometimes misses a few parse-trees .	S-132
OWN	For example , if we assume that each edge in the FSA is associated with a probability it is possible to define a threshold such that each partial result that is derived has a probability higher than the threshold .	S-133
OWN	Thus , it is still possible to have cycles in the FSA , but anytime the cycle is ` used ' the probability decreases and if too many cycles are encountered the threshold will cut off that derivation .	S-134
OWN	Of course this implies that sometimes the intersection is considered empty by this procedure whereas in fact the intersection is not .	S-135
OWN	For any threshold it is the case that the intersection problem of off-line parsable DCGs and FSA is decidable .	S-136
OWN	Compromise Soundness	S-137
OWN	Soundness in this context should be understood as the property that all parse trees in the parse forest grammar are valid parse trees .	S-138
OWN	A possible way to ensure termination is to remove all constraints from the DCG and parse according to this context-free skeleton .	S-139
OWN	The resulting parse-forest grammar will be too general most of the times .	S-140
OWN	A practical variation can be conceived as follows .	S-141
OWN	From the DCG we take its context-free skeleton .	S-142
OWN	This skeleton is obtained by removing the constraints from each of the grammar rules .	S-143
OWN	Then we compute the intersection of the skeleton with the input FSA .	S-144
OWN	This results in a parse forest grammar .	S-145
OWN	Finally , we add the corresponding constraints from the DCG to the grammar rules of the parse forest grammar .	S-146
OWN	This has the advantage that the result is still sound and complete , although the size of the parse forest grammar is not optimal ( as a consequence it is not guaranteed that the parse forest grammar contains a parse tree ) .	S-147
OWN	Of course it is possible to experiment with different ways of taking the context-free skeleton ( including as much information as possible / useful ) .	S-148
OWN	I would like to thank Gosse Bouma , Mark-Jan Nederhof and John Nerbonne for comments on this paper .	S-149
OWN	Furthermore the paper benefitted from remarks made by the anonymous ACL reviewers .	S-150
