<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE PAPER SYSTEM "paper-structure.dtd">
<PAPER>
<METADATA>
<FILENO>9502006</FILENO>
<APPEARED><CONFERENCE>EACL</CONFERENCE><YEAR>1995</YEAR></APPEARED>
<CLASSIFICATION> Lg.Pr.Ml  </CLASSIFICATION>
</METADATA>
<TITLE> Rapid Development of Morphological Descriptions for Full Language Processing Systems </TITLE>
<AUTHORLIST>
<AUTHOR>David Carter</AUTHOR>
</AUTHORLIST>
<ABSTRACT>
<A-S ID='A-0' DOCUMENTC='S-19' AZ='AIM'> I describe a compiler and development environment for feature-augmented two-level morphology rules integrated into a full NLP system . </A-S>
<A-S ID='A-1' AZ='OWN'> The compiler is optimized for a class of languages including many or most European ones , and for rapid development and debugging of descriptions of new languages . </A-S>
<A-S ID='A-2' AZ='OWN'> The key design decision is to compose morphophonological and morphosyntactic information , but not the lexicon , when compiling the description . </A-S>
<A-S ID='A-3' AZ='OWN'> This results in typical compilation times of about a minute , and has allowed a reasonably full , feature-based description of French inflectional morphology to be developed in about a month by a linguist new to the system . </A-S>
</ABSTRACT>
<BODY>
<DIV DEPTH='1'>
<HEADER ID='H-0'> Introduction </HEADER>
<P>
<S ID='S-0' AZ='BKG'> The paradigm of two-level morphology <REF TYPE='P'>Koskenniemi 1983</REF> has become popular for handling word formation phenomena in a variety of languages . </S>
<S ID='S-1' AZ='OTH'> The original formulation has been extended to allow morphotactic constraints to be expressed by feature specification <REF TYPE='P'>Trost 1990</REF> , <REF TYPE='P' SELF="YES">Alshawi et al. 1991</REF> rather than <REFAUTHOR>Koskenniemi</REFAUTHOR> 's less perspicuous device of continuation classes . </S>
<S ID='S-2' AZ='OTH'> Methods for the automatic compilation of rules from a notation convenient for the rule-writer into finite-state automata have also been developed , allowing the efficient analysis and synthesis of word forms . </S>
<S ID='S-3' AZ='OTH'> The automata may be derived from the rules alone <REF TYPE='P'>Trost 1990</REF> , or involve composition with the lexicon <REF TYPE='P'>Karttunen et al. 1992</REF> . </S>
</P>
<P>
<S ID='S-4' AZ='CTR'> However , there is often a trade-off between run-time efficiency and factors important for rapid and accurate system development , such as perspicuity of notation , ease of debugging , speed of compilation and the size of its output , and the independence of the morphological and lexical components . </S>
<S ID='S-5' AZ='BKG' TYPE='ITEM'> In compilation , one may compose any or all of </S>
</P>
<P>
<S ID='S-6' TYPE='ITEM' AZ='BKG'> the two-level rule set , </S>
<S ID='S-7' TYPE='ITEM' AZ='BKG'> the set of affixes and their allowed combinations , and </S>
<S ID='S-8' TYPE='ITEM' AZ='BKG'> the lexicon ; </S>
</P>
<P>
<S ID='S-9' AZ='BKG'> see <REF TYPE='A'>Kaplan and Kay 1994</REF> for an exposition of the mathematical basis . </S>
<S ID='S-10' AZ='BKG'> The type of compilation appropriate for rapid development and acceptable run-time performance depends on , at least , the nature of the language being described and the number of base forms in the lexicon ; that is , on the position in the three-dimensional space defined by <CREF/> , <CREF/> and <CREF/> . </S>
</P>
<P>
<S ID='S-11' AZ='BKG'> For example , English inflectional morphology is relatively simple ; dimensions <CREF/> and <CREF/> are fairly small , so if <CREF/> , the lexicon , is known in advance and is of manageable size , then the entire task of morphological analysis can be carried out at compile time , producing a list of analysed word forms which need only be looked up at run time , or a network which can be traversed very simply . </S>
<S ID='S-12' AZ='BKG'> Alternatively , there may be no need to provide as powerful a mechanism as two-level morphology at all ; a simpler device such as affix stripping <REF TYPE='P'>Alshawi 1992</REF> or merely listing all inflected forms explicitly may be preferable . </S>
</P>
<P>
<S ID='S-13' AZ='BKG'> For agglutinative languages such as Korean , Finnish and Turkish <REF TYPE='P'>Kwon and Karttunen 1994</REF> , <REF TYPE='P'>Koskenniemi 1983</REF> , <REF TYPE='P'>Oflazer 1993</REF> , dimension <CREF/> is very large , so creating an exhaustive word list is out of the question unless the lexicon is trivial . </S>
<S ID='S-14' AZ='BKG'> Compilation to a network may still make sense , however , and because these languages tend to exhibit few non-concatenative morphophonological phenomena other than vowel harmony , the continuation class mechanism may suffice to describe the allowed affix sequences at the surface level . </S>
</P>
<P>
<S ID='S-15' AZ='BKG'> Many European languages are of the inflecting type , and occupy still another region of the space of difficulty . </S>
<S ID='S-16' AZ='BKG'> They are too complex morphologically to yield easily to the simpler techniques that can work for English . </S>
<S ID='S-17' AZ='BKG'> The phonological or orthographic changes involved in affixation may be quite complex , so dimension <CREF/> can be large , and a feature mechanism may be needed to handle such varied but interrelated morphosyntactic phenomena such as umlaut <REF TYPE='P'>Trost 1991</REF> , case , number , gender , and different morphological paradigms . </S>
<S ID='S-18' AZ='BKG'> On the other hand , while there may be many different affixes , their possibilities for combination within a word are fairly limited , so dimension <CREF/> is quite manageable . </S>
</P>
<P>
<S ID='S-19' ABSTRACTC='A-0' AZ='AIM'> This paper describes a representation and associated compiler intended for two-level morphological descriptions of the written forms of inflecting languages . </S>
<S ID='S-20' AZ='BAS'> The system described is a component of the Core Language Engine ( CLE ) <REF TYPE='P'>Alshawi 1992</REF> , a general-purpose language analyser and generator implemented in Prolog which supports both a built-in lexicon and access to large external lexical databases . </S>
<S ID='S-21' AZ='OWN'> In this context , highly efficient word analysis and generation at run-time are less important than ensuring that the morphology mechanism is expressive , is easy to debug , and allows relatively quick compilation . </S>
<S ID='S-22' AZ='OWN'> Morphology also needs to be well integrated with other processing levels . </S>
<S ID='S-23' AZ='OWN'> In particular , it should be possible to specify relations among morphosyntactic and morphophonological rules and lexical entries ; for the convenience of developers , this is done by means of feature equations . </S>
<S ID='S-24' AZ='OWN'> Further , it cannot be assumed that the lexicon has been fully specified when the morphology rules are compiled . </S>
<S ID='S-25' AZ='OWN'> Developers may wish to add and test further lexical entries without frequently recompiling the rules , and it may also be necessary to deal with unknown words at run time , for example by querying a large external lexical database or attempting spelling correction <REF TYPE='P'>Alshawi 1992</REF> . </S>
<S ID='S-26' AZ='OWN'> Also , both analysis and generation of word forms are required . </S>
<S ID='S-27' AZ='OWN'> Run-time speed need only be enough to make the time spent on morphology small compared to sentential and contextual processing . </S>
</P>
<P>
<S ID='S-28' AZ='AIM'> These parameters - languages with a complex morphology / syntax interface but a limited number of affix combinations , tasks where the lexicon is not necessarily known at compile time , bidirectional processing , and the need to ease development rather than optimize run-time efficiency - dictate the design of the morphology compiler described in this paper , in which spelling rules and possible affix combinations ( items <CREF/> and <CREF/> ) , but not the lexicon ( item <CREF/> ) , are composed in the compilation phase . </S>
<S ID='S-29' AZ='OWN'> Descriptions of French , Polish and English inflectional morphology have been developed for it , and I show how various aspects of the mechanism allow phenomena in these languages to be handled . </S>
</P>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-1'> The Description Language </HEADER>
<DIV DEPTH='2'>
<HEADER ID='H-2'> Morphophonology </HEADER>
<P>
<S ID='S-30' AZ='BAS'> The formalism for spelling rules ( dimension <CREF/> ) is a syntactic variant of that of <REF TYPE='A'>Ruessink 1989</REF> and <REF TYPE='A'>Pulman 1991</REF> . </S>
<S ID='S-31' AZ='OWN'> A rule is of the form </S>
</P>
<IMAGE ID='I-0'/>
<P>
<S ID='S-32' AZ='OWN'> Rules may be optional ( Op is `` <EQN/> '' ) or obligatory ( Op is `` <EQN/> '' ) . </S>
<S ID='S-33' AZ='OWN'> Surface and Lexical are both strings of the form  </S>
</P>
<IMAGE ID='I-1'/>
<P>
<S ID='S-34' AZ='OWN'> meaning that the surface and lexical targets may correspond if the left and right contexts and the Features specification are satisfied . </S>
<S ID='S-35' AZ='OWN'> The vertical bars simply separate the parts of the string and do not themselves match letters . </S>
<S ID='S-36' AZ='OWN'> The correspondence between surface and lexical strings for an entire word is licensed if there is a partitioning of both so that each partition ( pair of corresponding surface and lexical targets ) is licensed by a rule , and no partition breaks an obligatory rule . </S>
<S ID='S-37' AZ='OWN'> A partition breaks an obligatory rule if the surface target does not match but everything else , including the feature specification , does . </S>
</P>
<P>
<S ID='S-38' AZ='OWN'> The Features in a rule is a list of <EQN/> equations . </S>
<S ID='S-39' AZ='OWN'> The allowed ( finite ) set of values of each feature must be prespecified . </S>
<S ID='S-40' AZ='OWN'> Value may be atomic or it may be a boolean expression . </S>
</P>
<P>
<S ID='S-41' AZ='OWN'> Members of the surface and lexical strings may be characters or classes of single characters . </S>
<S ID='S-42' AZ='OWN'> The latter are represented by a single digit N in the string and an item N / ClassName in the Classes list ; multiple occurrences of the same N in a single rule must all match the same character in a given application . </S>
</P>
<P>
<S ID='S-43' AZ='OWN'> Figure <CREF/> shows three of the French spelling rules developed for this system . </S>
<S ID='S-44' AZ='OWN'> The <EQN/> rule ( simplified slightly here ) makes it obligatory for a lexical e to be realised as a surface when followed by t , r , or l , then a morpheme boundary , then e , as long as the feature cdouble has an appropriate value . </S>
<S ID='S-45' AZ='OWN'> The default rule that copies characters between surface and lexical levels and the boundary rule that deletes boundary markers are both optional . </S>
</P>
<IMAGE ID='I-2'/>
<P>
<S ID='S-46' AZ='OWN'> Together these rules permit the following realization of cher ( `` expensive '' ) followed by e ( feminine gender suffix ) as chre , as shown in Figure <CREF/> . </S>
</P>
<IMAGE ID='I-3'/>
<P>
<S ID='S-47' AZ='OWN'> Because of the obligatory nature of change _ e _ 1 , and the fact that the orthographic feature restriction on the root cher , [ cdouble = n ] , is consistent with the one on that rule , an alternative realisation chere , involving the use of the default rule in third position , is ruled out . </S>
</P>
<P>
<S ID='S-48' AZ='OWN'> Unlike many other flavours of two-level morphology , the Target parts of a rule need not consist of a single character ( or class occurrence ) ; they can contain more than one , and the surface target may be empty . </S>
<S ID='S-49' AZ='OWN'> This obviates the need for `` null '' characters at the surface . </S>
<S ID='S-50' AZ='OWN'> However , although surface targets of any length can usefully be specified , it is in practice a good strategy always to make lexical targets exactly one character long , because , by definition , an obligatory rule cannot block the application of another rule if their lexical targets are of different lengths . </S>
<S ID='S-51' AZ='OWN'> The example in Section <CREF/> below clarifies this point . </S>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-3'> Word Formation and Interfacing to Syntax </HEADER>
<P>
<S ID='S-52' AZ='OWN'> The allowed sequences of morphemes , and the syntactic and semantic properties of morphemes and of the words derived by combining them , are specified by morphosyntactic production rules ( dimension <CREF/> ) and lexical entries both for affixes ( dimension <CREF/> ) and for roots ( dimension <CREF/> ) , essentially as described by <REF TYPE='A'>Alshawi 1992</REF> ( where the production rules are referred to as `` morphology rules '' ) . </S>
<S ID='S-53' AZ='OWN'> Affixes may appear explicitly in production rules or , like roots , they may be assigned complex feature-valued categories . </S>
<S ID='S-54' AZ='OWN'> Information , including the creation of logical forms , is passed between constituents in a rule by the sharing of variables . </S>
<S ID='S-55' AZ='OWN'> These feature-augmented production rules are just the same device as those used in the CLE 's syntactico-semantic descriptions , and are a much more natural way to express morphotactic information than finite-state devices such as continuation classes ( see <REF TYPE='A'>Trost and Matiasek 1994</REF> , for a related approach ) . </S>
</P>
<P>
<S ID='S-56' AZ='OWN'> The syntactic and semantic production rules for deriving the feminine singular of a French adjective by suffixation with `` e '' are given , with some details omitted , in Figure <CREF/> . </S>
<S ID='S-57' AZ='OWN'> In this case , nearly all features are shared between the inflected word and the root , as is the logical form for the word ( shown as Adj in the deriv rule ) . </S>
<S ID='S-58' AZ='OWN'> The only differing feature is that for gender , shown as the third argument of the @ agr macro , which itself expands to a category . </S>
</P>
<IMAGE ID='I-4'/>
<P>
<S ID='S-59' AZ='OWN'> Irregular forms , either complete words or affixable stems , are specified by listing the morphological rules and terminal morphemes from which the appropriate analyses may be constructed , for example : </S>
</P>
<IMAGE ID='I-5'/>
<P>
<S ID='S-60' AZ='OWN'> Here , PRESENT _ 3 s is a pseudo-affix which has the same syntactic and semantic information attached to it as ( one sense of ) the affix `` t '' , which is used to form some regular third person singulars . </S>
<S ID='S-61' AZ='OWN'> However , the spelling rules make no reference to PRESENT _ 3 s ; it is simply a device allowing categories and logical forms for irregular words to be built up using the same production rules as for regular words . </S>
</P>
</DIV>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-4'> Compilation </HEADER>
<P>
<S ID='S-62' AZ='OWN'> All rules and lexical entries in the CLE are compiled to a form that allows normal Prolog unification to be used for category matching at run time . </S>
<S ID='S-63' AZ='OWN'> The same compiled forms are used for analysis and generation , but are indexed differently . </S>
<S ID='S-64' AZ='OWN'> Each feature for a major category is assigned a unique position in the compiled Prolog term , and features for which finite value sets have been specified are compiled into vectors in a form that allows boolean expressions , involving negation as well as conjunction and disjunction , to be conjoined by unification <REF TYPE='P'>Mellish 1988</REF> , <REF TYPE='P'>Alshawi 1992</REF>  . </S>
</P>
<P>
<S ID='S-65' AZ='OWN'> The compilation of morphological information is motivated by the nature of the task and of the languages to be handled . </S>
<S ID='S-66' AZ='OWN'> As discussed in Section <CREF/> , we expect the number of affix combinations to be limited , but the lexicon is not necessarily known in advance . </S>
<S ID='S-67' AZ='OWN'> Morphophonological interactions may be quite complex , and the purpose of morphological processing is to derive syntactic and semantic analyses from words and vice versa for the purpose of full NLP. Reasonably quick compilation is required , and run-time speed need only be moderate . </S>
</P>
<DIV DEPTH='2'>
<HEADER ID='H-5'> Compiling Spelling Patterns </HEADER>
<P>
<S ID='S-68' AZ='OWN'> Compilation of individual spell rules is straightforward ; feature specifications are compiled to positional / boolean format , characters and occurrences of character classes are also converted to boolean vectors , and left contexts are reversed <REF TYPE='P'>Abramson 1992</REF> for efficiency . </S>
<S ID='S-69' AZ='OWN'> However , although it would be possible to analyse words directly with individually compiled rules ( see Section <CREF/> below ) , it can take an unacceptably long time to do so , largely because of the wide range of choices of rule available at each point and the need to check at each stage that obligatory rules have not been broken . </S>
<S ID='S-70' AZ='OWN'> We therefore take the following approach . </S>
</P>
<P>
<S ID='S-71' AZ='OWN'> First , all legal sequences of morphemes are produced by top-down nondeterministic application of the production rules ( Section <CREF/> ) , selecting affixes but keeping the root morpheme unspecified because , as explained above , the lexicon is undetermined at this stage . </S>
<S ID='S-72' AZ='OWN'> For example , for English , the sequences *+ ed + ly and un +*+ ing are among those produced , the asterisk representing the unspecified root . </S>
</P>
<P>
<S ID='S-73' AZ='OWN'> Then , each sequence , together with any associated restrictions on orthographic features , undergoes analysis by the compiled spelling rules ( Section <CREF/> ) , with the surface sequence and the root part of the lexical sequence initially uninstantiated . </S>
<S ID='S-74' AZ='BAS'> Rules are applied recursively and nondeterministically , somewhat in the style of <REF TYPE='A'>Abramson 1992</REF> , taking advantage of Prolog 's unification mechanism to instantiate the part of the surface string corresponding to affixes and to place some spelling constraints on the start and / or end of the surface and / or lexical forms of the root . </S>
</P>
<P>
<S ID='S-75' AZ='OWN'> This process results in a set of spelling patterns , one for each distinct application of the spelling rules to each affix sequence suggested by the production rules . </S>
<S ID='S-76' AZ='OWN'> A spelling pattern consists of partially specified surface and lexical root character sequences , fully specified surface and lexical affix sequences , orthographic feature constraints associated with the spelling rules and affixes used , and a pair of syntactic category specifications derived from the production rules used . </S>
<S ID='S-77' AZ='OWN'> One category is for the root form , and one for the inflected form . </S>
</P>
<P>
<S ID='S-78' AZ='OWN'> Spelling patterns are indexed according to the surface ( for analysis ) and lexical ( for generation ) affix characters they involve . </S>
<S ID='S-79' AZ='OWN'> At run time , an inflected word is analysed nondeterministically in several stages , each of which may succeed any number of times including zero . </S>
</P>
<P>
<S ID='S-80' TYPE='ITEM' AZ='OWN'> stripping off possible ( surface ) affix characters in the word and locating a spelling pattern that they index ; </S>
<S ID='S-81' TYPE='ITEM' AZ='OWN'> matching the remaining characters in the word against the surface part of the spelling pattern , thereby , through shared variables , instantiating the characters for the lexical part to provide a possible root spelling ; </S>
<S ID='S-82' TYPE='ITEM' AZ='OWN'> checking any orthographic feature constraints on that root ; </S>
<S ID='S-83' TYPE='ITEM' AZ='OWN'> finding a lexical entry for the root , by any of a range of mechanisms including lookup in the system 's own lexicon , querying an external lexical database , or attempting to guess an entry for an undefined word ; and </S>
<S ID='S-84' TYPE='ITEM' AZ='OWN'> unifying the root lexical entry with the root category in the spelling pattern , thereby , through variable sharing with the other category in the pattern , creating a fully specified category for the inflected form that can be used in parsing . </S>
</P>
<P>
<S ID='S-85' AZ='OWN'> In generation , the process works in reverse , starting from indexes on the lexical affix characters . </S>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-6'> Representing Lexical Roots </HEADER>
<P>
<S ID='S-86' AZ='OWN'> Complications arise in spelling rule application from the fact that , at compile time , neither the lexical nor the surface form of the root , nor even its length , is known . </S>
<S ID='S-87' AZ='OWN'> It would be possible to hypothesize all sensible lengths and compile separate spelling patterns for each . </S>
<S ID='S-88' AZ='OWN'> However , this would lead to many times more patterns being produced than are really necessary . </S>
</P>
<P>
<S ID='S-89' AZ='OWN'> Lexical ( and , after instantiation , surface ) strings for the unspecified roots are therefore represented in a more complex but less redundant way : as a structure  </S>
</P>
<IMAGE ID='I-6'/>
<P>
<S ID='S-90' AZ='OWN'> Here the <EQN/> 's are variables later instantiated to single characters at the beginning of the root , and L is a variable , which is later instantiated to a list of characters , for its continuation . </S>
<S ID='S-91' AZ='OWN'> Similarly , the <EQN/> 's represent the end of the root , and R is the continuation ( this time reversed ) leftwards into the root from the <EQN/> . </S>
<S ID='S-92' AZ='OWN'> The <EQN/> structure is always matched specially with a Kleene-star of the default spelling rule . </S>
<S ID='S-93' AZ='OWN'> For full generality and minimal redundancy , <EQN/> and <EQN/> are constrained not to match the default rule , but the other <EQN/> 's and <EQN/> 's may . </S>
<S ID='S-94' AZ='OWN'> The values of n required are those for which , for some spelling rule , there are k characters in the target lexical string and n-k from the beginning of the right context up to ( but not including ) a boundary symbol . </S>
<S ID='S-95' AZ='OWN'> The lexical string of that rule may then match <EQN/> , and its right context match <EQN/> + , ... . </S>
<S ID='S-96' AZ='OWN'> The required values of m may be calculated similarly with reference to the left contexts of rules . </S>
</P>
<P>
<S ID='S-97' AZ='OWN'> During rule compilation , the spelling pattern that leads to the run-time analysis of chre given above is derived from m = 0 and n = 2 and the specified rule sequence , with the variables <EQN/> <EQN/> matching as in Figure <CREF/> . </S>
</P>
<IMAGE ID='I-7'/>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-7'> Applying Obligatory Rules </HEADER>
<P>
<S ID='S-98' AZ='OWN'> In the absence of a lexical string for the root , the correct treatment of obligatory rules is another problem for compilation . </S>
<S ID='S-99' AZ='OWN'> If an obligatory rule specifies that lexical X must be realised as surface Y when certain contextual and feature conditions hold , then a partitioning where X is realised as something other than Y is only allowed if one or more of those conditions is unsatisfied . </S>
<S ID='S-100' AZ='OWN'> Because of the use of boolean vectors for both features and characters , it is quite possible to constrain each partitioning by unifying it with the complement of one of the conditions of each applicable obligatory rule , thereby preventing that rule from applying . </S>
<S ID='S-101' AZ='OWN'> For English , with its relatively simple inflectional spelling changes , this works well . </S>
<S ID='S-102' AZ='OWN'> However , for other languages , including French , it leads to excessive numbers of spelling patterns , because there are many obligatory rules with non-trivial contexts and feature specifications . </S>
</P>
<P>
<S ID='S-103' AZ='OWN'> For this reason , complement unification is not actually carried out at compile time . </S>
<S ID='S-104' AZ='OWN'> Instead , the spelling patterns are augmented with the fact that certain conditions on certain obligatory rules need to be checked on certain parts of the partitioning when it is fully instantiated . </S>
<S ID='S-105' AZ='OWN'> This slows down run-time performance a little but , as we will see below , the speed is still quite acceptable . </S>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-8'> Timings </HEADER>
<P>
<S ID='S-106' AZ='OWN'> The compilation process for the entire rule set takes just over a minute for a fairly thorough description of French inflectional morphology , running on a Sparcstation 10 / 41 ( SPECint92 = 52.6 ) . </S>
<S ID='S-107' AZ='OWN'> Run-time speeds are quite adequate for full NLP , and reflect the fact that the system is implemented in Prolog rather than ( say ) C and that full syntactico-semantic analyses of sentences , rather than just morpheme sequences or acceptability judgments , are produced . </S>
</P>
<P>
<S ID='S-108' AZ='OWN'> Analysis of French words using this rule set and only an in-core lexicon averages around 50 words per second , with a mean of 11 spelling analyses per word leading to a mean of 1.6 morphological analyses ( the reduction being because many of the roots suggested by spelling analysis do not exist or cannot combine with the affixes produced ) . </S>
<S ID='S-109' AZ='OWN'> If results are cached , subsequent attempts to analyse the same word are around 40 times faster still . </S>
<S ID='S-110' AZ='OWN'> Generation is also quite acceptably fast , running at around 100 words per second ; it is slightly faster than analysis because only one spelling , rather than all possible analyses , is sought from each call . </S>
<S ID='S-111' AZ='OWN'> Because of the separation between lexical and morphological representations , these timings are essentially unaffected by in-core lexicon size , as full advantage is taken of Prolog 's built-in indexing . </S>
</P>
<P>
<S ID='S-112' AZ='OWN'> Development times are at least as important as computation times . </S>
<S ID='S-113' AZ='OWN'> A rule set embodying a quite comprehensive treatment of French inflectional morphology was developed in about one person month . </S>
<S ID='S-114' AZ='BAS'> The English spelling rule set was adapted from <REF TYPE='A'>Ritchie et al. 1992</REF> in only a day or two . </S>
<S ID='S-115' AZ='OWN'> A Polish rule set is also under development , and Swedish is planned for the near future . </S>
</P>
</DIV>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-9'> Some Examples </HEADER>
<P>
<S ID='S-116' AZ='OWN'> To clarify further the use of the formalism and the operation of the mechanisms , we now examine several further examples . </S>
</P>
<DIV DEPTH='2'>
<HEADER ID='H-10'> Multiple-letter spelling changes </HEADER>
<P>
<S ID='S-117' AZ='OWN'> Some obligatory spelling changes in French involve more than one letter . </S>
<S ID='S-118' AZ='OWN'> For example , masculine adjectives and nouns ending in eau have feminine counterparts ending in elle : beau ( `` nice '' ) becomes belle , chameau ( `` camel '' ) becomes chamelle . </S>
<S ID='S-119' AZ='OWN'> The final e is a feminizing affix and can be seen as inducing the obligatory spelling change au <EQN/> ll. </S>
<S ID='S-120' AZ='OWN'> However , although the obvious spelling rule ,</S>
</P>
<IMAGE ID='I-8'/>
<P>
<S ID='S-121' AZ='OWN'> allows this change , it does not rule out the incorrect realization of beau + e as * beaue , shown in Figure <CREF/> . </S>
</P>
<IMAGE ID='I-9'/>
<P>
<S ID='S-122' AZ='OWN'> because it only affects partitionings where the au at the lexical level forms a single partition , rather than one for a and one for u. Instead , the following pair of rules , in which the lexical targets have only one character each , achieve the desired effect : </S>
</P>
<IMAGE ID='I-10'/>
<P>
<S ID='S-123' AZ='OWN'> Here , change _ au _ ll 1 rules out a : a partition in Figure <CREF/> , and change _ au _ ll 2 rules out the u : u one . </S>
</P>
<P>
<S ID='S-124' AZ='OWN'> It is not necessary for the surface target to contain exactly one character for the blocking effect to apply , because the semantics of obligatoriness is that the lexical target and all contexts , taken together , make the specified surface target ( of whatever length ) obligatory for that partition . </S>
<S ID='S-125' AZ='OWN'> The reverse constraint , on the lexical target , does not apply . </S>
</P>
</DIV>
<DIV DEPTH='2'>
<HEADER ID='H-11'> Using features to control rule application </HEADER>
<P>
<S ID='S-126' AZ='OWN'> Features can be used to control the application of rules to particular lexical items where the applicability cannot be deduced from spellings alone . </S>
<S ID='S-127' AZ='OWN'> For example , Polish nouns with stems whose final syllable has vowel normally have inflected forms in which the accent is dropped . </S>
<S ID='S-128' AZ='OWN'> Thus in the nominative plural , krj ( `` style '' ) becomes kroje , br ( `` forest '' ) becomes bory , bj ( `` combat '' ) becomes boje . </S>
<S ID='S-129' AZ='OWN'> However , there are exceptions , such as zbj ( `` bandit '' ) becoming zbje . </S>
<S ID='S-130' AZ='OWN'> Similarly , some French verbs whose infinitives end in - eler take a grave accent on the first e in the third person singular future ( modeler , `` model '' , becomes modlera ) , while others double the l instead ( e.g. appeler , `` call '' , becomes appellera ) . </S>
</P>
<P>
<S ID='S-131' AZ='OWN'> These phenomena can be handled by providing an obligatory rule for the case whether the letter changes , but constraining the applicability of the rule with a feature and making the feature clash with that for roots where the change does not occur . </S>
<S ID='S-132' AZ='OWN'> In the Polish case : </S>
</P>
<IMAGE ID='I-11'/>
<P>
<S ID='S-133' AZ='OWN'> Then the partitionings given in Figure <CREF/> will be the only possible ones . </S>
<S ID='S-134' AZ='OWN'> For bj , the change __ o rule must apply , because the chngo feature for bj is unspecified and therefore can take any value ; for zbj , however , the rule is prevented from applying by the feature clash , and so the default rule is the only one that can apply . </S>
</P>
<IMAGE ID='I-12'/>
</DIV>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-12'> Debugging the Rules </HEADER>
<P>
<S ID='S-135' AZ='OWN' TYPE='ITEM'> The debugging tools help in checking the operation of the spelling rules , either </S>
<S ID='S-136' TYPE='ITEM' AZ='OWN'> in conjunction with other constraints or </S>
<S ID='S-137' TYPE='ITEM' AZ='OWN'> on their own . </S>
</P>
<P>
<S ID='S-138' AZ='OWN'> For case <CREF/> , the user may ask to see all inflections of a root licensed by the spelling rules , production rules , and lexicon ; for cher , the output is </S>
</P>
<IMAGE ID='I-13'/>
<P>
<S ID='S-139' AZ='OWN'>  meaning that when cher is an adjp ( adjective ) it may combine with the suffixes listed to produce the inflected forms shown . </S>
<S ID='S-140' AZ='OWN'> This is useful in checking over - and undergeneration . </S>
<S ID='S-141' AZ='OWN'> It is also possible to view the spelling patterns and production rule tree used to produce a form ; for chre , the trace ( slightly simplified here ) is as in figure <CREF/> . </S>
</P>
<IMAGE ID='I-14'/>
<P>
<S ID='S-142' AZ='OWN'> The spelling pattern 194 referred to here is the one depicted in a different form in Figure <CREF/> . </S>
<S ID='S-143' AZ='OWN'> The notation <EQN/> denotes a set of possible consonants represented by the variable A , which also occurs on the right hand side of the rule , indicating that the same selection must be made for both occurrences . </S>
<S ID='S-144' AZ='OWN'> Production rule tree 17 is that for a single application of the rule adjp _ adjp _ fem , which describes the feminine form of the an adjective , where the root is taken to be the masculine form . </S>
<S ID='S-145' AZ='OWN'> The Root and Infl lines show the features that differ between the root and inflected forms , while the Both line shows those that they share . </S>
<S ID='S-146' AZ='OWN'> Tree 18 , which is also pointed to by the spelling pattern , describes the feminine forms of nouns analogously . </S>
</P>
<P>
<S ID='S-147' AZ='OWN'> For case <CREF/> , the spelling rules may be applied directly , just as in rule compilation , to a specified surface or lexical character sequence , as if no lexical or morphotactic constraints existed . </S>
<S ID='S-148' AZ='OWN'> Feature constraints , and cases where the rules will not apply if those constraints are broken , are shown . </S>
<S ID='S-149' AZ='OWN'> For the lexical sequence cher + e + , for example , the output is as follows .</S>
</P>
<IMAGE ID='I-15'/>
<P>
<S ID='S-150' AZ='OWN'> This indicates to the user that if cher is given a lexical entry consistent with the constraint cdouble = n , then only the first analysis will be valid ; otherwise , only the second will be . </S>
</P>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-13'> Conclusions and Further Work </HEADER>
<P>
<S ID='S-151' AZ='AIM'> The rule formalism and compiler described here work well for European languages with reasonably complex orthographic changes but a limited range of possible affix combinations . </S>
<S ID='S-152' AZ='OWN'> Development , compilation and run-time efficiency are quite acceptable , and the use of rules containing complex feature-augmented categories allows morphotactic behaviours and non-segmental spelling constraints to be specified in a way that is perspicuous to linguists , leading to rapid development of descriptions adequate for full NLP . </S>
</P>
<P>
<S ID='S-153' AZ='OWN'> The kinds of non-linear effects common in Semitic languages , where vowel and consonant patterns are interpolated in words <REF TYPE='P'>Kay 1987</REF> , <REF TYPE='P'>Kiraz 1994</REF> could be treated efficiently by the mechanisms described here if it proved possible to define a representation that allowed the parts of an inflected word corresponding to the root to be separated fairly cleanly from the parts expressing the inflection . </S>
<S ID='S-154' AZ='OWN'> The latter could then be used by a modified version of the current system as the basis for efficient lookup of spelling patterns which , as in the current system , would allow possible lexical roots to be calculated . </S>
</P>
<P>
<S ID='S-155' AZ='OWN'> Agglutinative languages could be handled efficiently by the current mechanism if specifications were provided for the affix combinations that were likely to occur at all often in real texts . </S>
<S ID='S-156' AZ='OWN'> A backup mechanism could then be provided which attempted a slower , but more complete , direct application of the rules for the rarer cases . </S>
</P>
<P>
<S ID='S-157' AZ='OWN'> The interaction of morphological analysis with spelling correction <REF TYPE='P' SELF="YES">Carter 1992</REF> , <REF TYPE='P'>Oflazer 1994</REF> , <REF TYPE='P'>Bowden 1995</REF> is another possibly fruitful area of work . </S>
<S ID='S-158' AZ='OWN'> Once the root spelling patterns and the affix combinations pointing to them have been created , analysis essentially reduces to an instance of affix-stripping , which would be amenable to exactly the technique outlined by <REF SELF="YES" TYPE='A'>Carter 1992</REF> . </S>
<S ID='S-159' AZ='OWN'> As in that work , a discrimination net of root forms would be required ; however , this could be augmented independently of spelling pattern creation , so that the flexibility resulting from not composing the lexicon with the spelling rules would not be lost . </S>
</P>
</DIV>
<DIV DEPTH='1'>
<HEADER ID='H-14'> Acknowledgments </HEADER>
<P>
<S ID='S-160' AZ='OWN'> I am grateful to Manny Rayner and anonymous European ACL referees for commenting on earlier versions of this paper , and to Pierrette Bouillion and Magorzata Sty for comments and also for providing me with their analyses of the French and Polish examples respectively . </S>
</P>
<P>
<S ID='S-161' AZ='OWN'> This research was partly funded by the Defence Research Agency , Malvern , UK , under Strategic Research Project M2YBT44X . </S>
</P>
</DIV>
</BODY>
<REFERENCELIST>
<REFERENCE>
<SURNAME>Abramson</SURNAME>, H., (<DATE>1992</DATE>). ``A Logic Programming View of Relational
Morphology''. Proceedings of COLING-92, 850-854.
</REFERENCE>
<REFERENCE>
<SURNAME>Alshawi</SURNAME>, H. (<DATE>1992</DATE>). The Core Language Engine (ed). MIT Press.
</REFERENCE>
<REFERENCE>
<SURNAME>Alshawi</SURNAME>, H., D.J. <SURNAME>Arnold</SURNAME>, R. <SURNAME>Backofen</SURNAME>, D.M. <SURNAME>Carter</SURNAME>, J. <SURNAME>Lindop</SURNAME>, K. <SURNAME>Netter</SURNAME>, S.G. <SURNAME>Pulman</SURNAME>, J. <SURNAME>Tsujii</SURNAME>, and H. <SURNAME>Uszkoreit</SURNAME> (<DATE>1991</DATE>). Eurotra
ET6/1: Rule Formalism and Virtual Machine Design Study. Commission of
the European Communities, Luxembourg.
</REFERENCE>
<REFERENCE>
<SURNAME>Bowden</SURNAME>, T. (<DATE>1995</DATE>) ``Cooperative Error Handling and Shallow
Processing'', these proceedings.
</REFERENCE>
<REFERENCE>
<SURNAME>Carter</SURNAME>, D.M. (<DATE>1992</DATE>). ``Lattice-based Word Identification in CLARE''.
Proceedings of ACL-92.
</REFERENCE>
<REFERENCE>
<SURNAME>Kaplan</SURNAME>, R., and M. <SURNAME>Kay</SURNAME> (<DATE>1994</DATE>). ``Regular Models of Phonological Rule
Systems'', Computational Linguistics, 20:3, 331-378.
</REFERENCE>
<REFERENCE>
<SURNAME>Kay</SURNAME>, M. (<DATE>1987</DATE>). ``Non-concatenative Finite-State Morphology''. 
Proceedings of EACL-87.
</REFERENCE>
<REFERENCE>
<SURNAME>Karttunen</SURNAME>, L., R.M. <SURNAME>Kaplan</SURNAME>, and A. <SURNAME>Zaenen</SURNAME> (<DATE>1992</DATE>). ``Two-level
Morphology with Composition''.  Proceedings of COLING-92,
141-148.
</REFERENCE>
<REFERENCE>
<SURNAME>Kiraz</SURNAME>, G. (<DATE>1994</DATE>). ``Multi-tape Two-level Morphology''.  
Proceedings of COLING-94, 180-186.
</REFERENCE>
<REFERENCE>
<SURNAME>Koskenniemi</SURNAME>, K. (<DATE>1983</DATE>). Two-level morphology: a general
computational model for word-form recognition and production.
University of Helsinki, Department of General Linguistics,
Publications, No. 11.
</REFERENCE>
<REFERENCE>
<SURNAME>Kwon</SURNAME>, H-C., and L. <SURNAME>Karttunen</SURNAME> (<DATE>1994</DATE>). ``Incremental Construction of
a Lexical Transducer for Korean''.   Proceedings of COLING-94,
<DATE>1262</DATE>-<DATE>1266</DATE>.
</REFERENCE>
<REFERENCE>
<SURNAME>Mellish</SURNAME>, C. S. (<DATE>1988</DATE>). ``Implementing Systemic Classification by
Unification''.  Computational Linguistics 14:40-51.
</REFERENCE>
<REFERENCE>
<SURNAME>Oflazer</SURNAME>, K. (<DATE>1993</DATE>). ``Two-level Description of Turkish Morphology''.
Proceedings of European ACL-93.
</REFERENCE>
<REFERENCE>
<SURNAME>Oflazer</SURNAME>, K. (<DATE>1994</DATE>). Spelling Correction in Agglutinative
Languages. Article 9410004 in cmp-lg@xxx.lanl.gov
archive.
</REFERENCE>
<REFERENCE>
<SURNAME>Ritchie</SURNAME>, G., G.J. <SURNAME>Russell</SURNAME>, A.W. <SURNAME>Black</SURNAME> and S.G. <SURNAME>Pulman</SURNAME> (<DATE>1992</DATE>).
Computational Morphology. MIT Press.
</REFERENCE>
<REFERENCE>
<SURNAME>Ruessink</SURNAME>, H. (<DATE>1989</DATE>). Two Level Formalisms. Utrecht Working
Papers in NLP, no. 5.
</REFERENCE>
<REFERENCE>
<SURNAME>Trost</SURNAME>, H. (<DATE>1990</DATE>). ``The Application of Two-level Morphology to
Non-Concatenative German Morphology''. Proceedings of COLING-90,
371-376.
</REFERENCE>
<REFERENCE>
<SURNAME>Trost</SURNAME>, H. (<DATE>1991</DATE>). ``X2MORF: A Morphological Component Based on
Augmented Two-level Morphology''. Proceedings of IJCAI-91,
<DATE>1024</DATE>-<DATE>1030</DATE>.
</REFERENCE>
<REFERENCE>
<SURNAME>Trost</SURNAME>, H., and J. <SURNAME>Matiasek</SURNAME> (<DATE>1994</DATE>). ``Morphology with a
Null-Interface'', Proceedings of COLING-94.
</REFERENCE>
</REFERENCELIST>
</PAPER>
